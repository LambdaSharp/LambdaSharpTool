@*
 * Sample Todo app using CloudWatch Logs, Metrics, and Events
 *@

@page "/todo"

@using LambdaSharp.Logging.Metrics

@inherits ALambdaComponent

<Container Fluid="true">
    <Row>
        <Column>
            <Card Margin="Margin.Is4.FromTop">
                <CardHeader Padding="Padding.Is1.FromBottom">
                    <Heading Size="HeadingSize.Is4">Todo List</Heading>
                </CardHeader>
                <CardBody Padding="Padding.Is0.FromBottom">
                    <Fields>
                        <Column ColumnSize="ColumnSize.Is1">
                            <Check TValue="bool" Checked="@Todos.All(x=>x.Completed)" CheckedChanged="@OnCheckAll">All</Check>
                        </Column>
                        <Column ColumnSize="ColumnSize.Is11">
                            <Addons>
                                <Addon AddonType="AddonType.Body">
                                    <Validations @ref="_validations" Mode="ValidationMode.Manual">
                                        <Validation Validator="@ValidationRule.IsNotEmpty">
                                            <TextEdit @bind-Text="@_description" Placeholder="What needs to be done?"></TextEdit>
                                        </Validation>
                                    </Validations>
                                </Addon>
                                <Addon AddonType="AddonType.End">
                                    <Button Color="Color.Primary" Clicked="@OnAddTodo">
                                        <Icon Name="IconName.Add" />Add
                                    </Button>
                                </Addon>
                            </Addons>
                        </Column>
                    </Fields>
                </CardBody>
                <CardBody Padding="Padding.Is0.OnY">
                    <ListGroup Flush="true">
                        @foreach(var todo in Todos) {
                            <TodoListItem Todo="@todo" StatusChanged="@OnTodoStatusChanged" />
                        }
                    </ListGroup>
                </CardBody>
                <CardFooter Padding="Padding.Is3.FromBottom">
                    <Field Horizontal="true">
                        <FieldBody ColumnSize="ColumnSize.Is10">
                            <Buttons Role="ButtonsRole.Addons">
                                <Button Color="Color.Info" Clicked="@(() => SetFilter(Filter.All))" Active="@(_filter == Filter.All)">All</Button>
                                <Button Color="Color.Info" Clicked="@(() => SetFilter(Filter.Active))" Active="@(_filter == Filter.Active)">Active</Button>
                                <Button Color="Color.Info" Clicked="@(() => SetFilter(Filter.Completed))" Active="@(_filter == Filter.Completed)">Completed</Button>
                            </Buttons>
                        </FieldBody>
                        <FieldBody ColumnSize="ColumnSize.Is2">
                            <Button Color="Color.Warning" Float="Float.Right" Clicked="@OnClearCompleted" Display="@(_todos.Any(x=>x.Completed) ? Display.Always : Display.None)">Clear Completed</Button>
                        </FieldBody>
                    </Field>
                </CardFooter>
            </Card>
        </Column>
    </Row>
</Container>

@code {

    //--- Types ---
    private enum Filter {
        All,
        Active,
        Completed,
    }

    //--- Fields ---
    private Validations _validations;
    private string _description;
    private Filter _filter = Filter.All;

    private List<TodoItem> _todos = new List<TodoItem> {
        new TodoItem {
            Description = "Buy milk"
        },
        new TodoItem {
            Description = "Call John regarding the meeting"
        },
        new TodoItem {
            Description = "Walk a dog"
        }
    };

    //--- Properties ---
    private IEnumerable<TodoItem> Todos
        => _filter switch {
            Filter.Active => _todos.Where(todo => !todo.Completed),
            Filter.Completed => _todos.Where(todo => todo.Completed),
            _ => _todos
        };

    //--- Methods ---
    private void SetFilter(Filter filter) {

        // filter Todo list by state
        _filter = filter;

        // record user action in CloudWatch Logs
        LogInfo($"filter changed to {filter}");
    }

    private void OnCheckAll(bool isChecked) => _todos.ForEach(x => x.Completed = isChecked);
    private void OnTodoStatusChanged(bool isChecked) => StateHasChanged();

    private void OnAddTodo() {
        if(_validations.ValidateAll()) {

            // create new todo item and add it to the list
            var todo = new TodoItem {
                Description = _description
            };
            _todos.Add(todo);

            // send event about added Todo item to CloudWatch EventBridge
            LogEvent(

                // identify the application source the event is part of
                source: "TodoApp",

                // identify the type of event
                detailType: "TodoAdded",

                // specify the event details
                detail: todo
            );

            // record number of created Todo items in CloudWatch Metrics
            LogMetric("TodoItems.Created", 1.0, LambdaMetricUnit.Count);

            // reset UI state
            _description = null;
            _validations.ClearAll();
        } else {

            // could not add Todo item, because validation failed
            LogInfo("input validation failed");
        }
    }

    private void OnClearCompleted() {

        // remove all cleared items from Todo list
        var todoItemsCleared = _todos.RemoveAll(x => x.Completed);

        // reset filter to show all items
        _filter = Filter.All;

        // record number of cleared Todo items in CloudWatch Metrics
        LogMetric("TodoItems.Cleared", todoItemsCleared, LambdaMetricUnit.Count);
    }
}