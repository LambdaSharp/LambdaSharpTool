{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Connect LambdaSharp app to CloudWatch EventBridge (v1.0-DEV)",
  "Parameters": {
    "AppVersionId": {
      "Type": "String",
      "Description": "App version identifier",
      "NoEcho": true
    },
    "DevMode": {
      "Type": "String",
      "Description": "Developer mode relaxes WebSocket authentication",
      "AllowedValues": [
        "Enabled",
        "Disabled"
      ],
      "Default": "Disabled"
    },
    "Secrets": {
      "Type": "String",
      "Description": "Secret Keys (ARNs)",
      "Default": ""
    },
    "XRayTracing": {
      "Type": "String",
      "Description": "AWS X-Ray Tracing",
      "AllowedValues": [
        "Disabled",
        "RootModule",
        "AllModules"
      ],
      "Default": "Disabled"
    },
    "LambdaSharpCoreServices": {
      "Type": "String",
      "Description": "Use LambdaSharp.Core Services",
      "AllowedValues": [
        "Disabled",
        "Enabled"
      ],
      "Default": "Disabled"
    },
    "LambdaSharpCoreDeadLetterQueue": {
      "Type": "String",
      "Description": "Cross-module reference for LambdaSharp.Core::DeadLetterQueue",
      "AllowedPattern": "^.+$",
      "ConstraintDescription": "must either be a cross-module reference or a non-empty value",
      "Default": "$LambdaSharp-Core::DeadLetterQueue"
    },
    "LambdaSharpCoreLoggingStream": {
      "Type": "String",
      "Description": "Cross-module reference for LambdaSharp.Core::LoggingStream",
      "AllowedPattern": "^.+$",
      "ConstraintDescription": "must either be a cross-module reference or a non-empty value",
      "Default": "$LambdaSharp-Core::LoggingStream"
    },
    "LambdaSharpCoreLoggingStreamRole": {
      "Type": "String",
      "Description": "Cross-module reference for LambdaSharp.Core::LoggingStreamRole",
      "AllowedPattern": "^.+$",
      "ConstraintDescription": "must either be a cross-module reference or a non-empty value",
      "Default": "$LambdaSharp-Core::LoggingStreamRole"
    },
    "DeploymentBucketName": {
      "Type": "String",
      "Description": "Deployment S3 Bucket Name"
    },
    "DeploymentPrefix": {
      "Type": "String",
      "Description": "Deployment Tier Prefix"
    },
    "DeploymentPrefixLowercase": {
      "Type": "String",
      "Description": "Deployment Tier Prefix (lowercase)"
    },
    "DeploymentRoot": {
      "Type": "String",
      "Description": "Root Stack Name",
      "Default": ""
    },
    "DeploymentChecksum": {
      "Type": "String",
      "Description": "Deployment Checksum",
      "Default": "BFD9A31ED8B3C15C4A4B5BA39EB61B70"
    }
  },
  "Resources": {
    "ListenerFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "DeploymentBucketName"
          },
          "S3Key": "<%MODULE_ORIGIN%>/LambdaSharp/App.EventBus/.artifacts/ListenerFunction-DRYRUN.zip"
        },
        "DeadLetterConfig": {
          "TargetArn": {
            "Fn::If": [
              "UseCoreServices",
              {
                "Fn::If": [
                  "LambdaSharpCoreDeadLetterQueueIsImported",
                  {
                    "Fn::ImportValue": {
                      "Fn::Sub": [
                        "${DeploymentPrefix}${Import}",
                        {
                          "Import": {
                            "Fn::Select": [
                              "1",
                              {
                                "Fn::Split": [
                                  "$",
                                  {
                                    "Ref": "LambdaSharpCoreDeadLetterQueue"
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      ]
                    }
                  },
                  {
                    "Ref": "LambdaSharpCoreDeadLetterQueue"
                  }
                ]
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        },
        "Description": "Lambda function listening on the WebSocket connection (v1.0-DEV)",
        "Environment": {
          "Variables": {
            "DEBUG_LOGGING_ENABLED": "false",
            "MODULE_ID": {
              "Ref": "AWS::StackName"
            },
            "MODULE_INFO": "LambdaSharp.App.EventBus:1.0-DEV@<%MODULE_ORIGIN%>",
            "LAMBDA_NAME": "ListenerFunction",
            "LAMBDA_RUNTIME": "dotnetcore3.1",
            "DEPLOYMENT_TIER": {
              "Fn::Select": [
                "0",
                {
                  "Fn::Split": [
                    "-",
                    {
                      "Ref": "DeploymentPrefix"
                    }
                  ]
                }
              ]
            },
            "DEPLOYMENTBUCKETNAME": {
              "Ref": "DeploymentBucketName"
            },
            "DEADLETTERQUEUE": {
              "Fn::If": [
                "UseCoreServices",
                {
                  "Fn::If": [
                    "LambdaSharpCoreDeadLetterQueueIsImported",
                    {
                      "Fn::ImportValue": {
                        "Fn::Sub": [
                          "${DeploymentPrefix}${Import}",
                          {
                            "Import": {
                              "Fn::Select": [
                                "1",
                                {
                                  "Fn::Split": [
                                    "$",
                                    {
                                      "Ref": "LambdaSharpCoreDeadLetterQueue"
                                    }
                                  ]
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "Ref": "LambdaSharpCoreDeadLetterQueue"
                    }
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "STR_CLIENTAPIKEY": {
              "Fn::If": [
                "DevModeIsEnabled",
                {
                  "Fn::Base64": {
                    "Fn::Select": [
                      "2",
                      {
                        "Fn::Split": [
                          "/",
                          {
                            "Ref": "AWS::StackId"
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "Fn::Base64": {
                    "Fn::Sub": [
                      "${Prefix}:${Suffix}",
                      {
                        "Prefix": {
                          "Ref": "AppVersionId"
                        },
                        "Suffix": {
                          "Fn::Select": [
                            "2",
                            {
                              "Fn::Split": [
                                "/",
                                {
                                  "Ref": "AWS::StackId"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "STR_EVENTTOPIC": {
              "Ref": "EventTopic"
            },
            "STR_HTTPAPIINVOCATIONTOKEN": {
              "Fn::Base64": {
                "Fn::Select": [
                  "2",
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Ref": "AWS::StackId"
                      }
                    ]
                  }
                ]
              }
            },
            "STR_EVENTBROADCASTAPIURL": {
              "Fn::Sub": "${EventBroadcastApi.ApiEndpoint}/$default"
            },
            "STR_DATATABLE": {
              "Fn::GetAtt": [
                "DataTable",
                "Arn"
              ]
            },
            "STR_MODULE_ROLE_DEADLETTERQUEUEPOLICY": {
              "Fn::If": [
                "UseCoreServices",
                {
                  "Ref": "ModuleRoleDeadLetterQueuePolicy"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "STR_MODULE_ROLE_SECRETSPOLICY": {
              "Fn::If": [
                "ModuleRoleSecretsPolicyCondition",
                {
                  "Ref": "ModuleRoleSecretsPolicy"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "STR_MODULE_WEBSOCKET_URL": {
              "Fn::Sub": "wss://${ModuleWebSocket}.execute-api.${AWS::Region}.${AWS::URLSuffix}/LATEST"
            }
          }
        },
        "Handler": "ListenerFunction::LambdaSharp.App.EventBus.ListenerFunction.Function::FunctionHandlerAsync",
        "MemorySize": "256",
        "Role": {
          "Fn::GetAtt": [
            "ModuleRole",
            "Arn"
          ]
        },
        "Runtime": "dotnetcore3.1",
        "Timeout": "30",
        "TracingConfig": {
          "Mode": {
            "Fn::If": [
              "XRayIsEnabled",
              "Active",
              "PassThrough"
            ]
          }
        }
      }
    },
    "ListenerFunctionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": "/aws/lambda/${ListenerFunction}"
        },
        "RetentionInDays": 30
      }
    },
    "EventTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {}
    },
    "EventTopicPolicy": {
      "Type": "AWS::SNS::TopicPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "EventsPublish",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com"
              },
              "Action": "sns:Publish",
              "Resource": {
                "Ref": "EventTopic"
              }
            }
          ]
        },
        "Topics": [
          {
            "Ref": "EventTopic"
          }
        ]
      }
    },
    "EventBroadcastApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-HttpApi"
        },
        "Description": "Event Broadcast HTTP API",
        "ProtocolType": "HTTP",
        "Target": {
          "Fn::GetAtt": [
            "BroadcastFunction",
            "Arn"
          ]
        }
      }
    },
    "BroadcastFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "DeploymentBucketName"
          },
          "S3Key": "<%MODULE_ORIGIN%>/LambdaSharp/App.EventBus/.artifacts/BroadcastFunction-DRYRUN.zip"
        },
        "DeadLetterConfig": {
          "TargetArn": {
            "Fn::If": [
              "UseCoreServices",
              {
                "Fn::If": [
                  "LambdaSharpCoreDeadLetterQueueIsImported",
                  {
                    "Fn::ImportValue": {
                      "Fn::Sub": [
                        "${DeploymentPrefix}${Import}",
                        {
                          "Import": {
                            "Fn::Select": [
                              "1",
                              {
                                "Fn::Split": [
                                  "$",
                                  {
                                    "Ref": "LambdaSharpCoreDeadLetterQueue"
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      ]
                    }
                  },
                  {
                    "Ref": "LambdaSharpCoreDeadLetterQueue"
                  }
                ]
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        },
        "Description": "Lambda function for broadcasting CloudWatch events to a WebSocket connection (v1.0-DEV)",
        "Environment": {
          "Variables": {
            "DEBUG_LOGGING_ENABLED": "false",
            "MODULE_ID": {
              "Ref": "AWS::StackName"
            },
            "MODULE_INFO": "LambdaSharp.App.EventBus:1.0-DEV@<%MODULE_ORIGIN%>",
            "LAMBDA_NAME": "BroadcastFunction",
            "LAMBDA_RUNTIME": "dotnetcore3.1",
            "DEPLOYMENT_TIER": {
              "Fn::Select": [
                "0",
                {
                  "Fn::Split": [
                    "-",
                    {
                      "Ref": "DeploymentPrefix"
                    }
                  ]
                }
              ]
            },
            "DEPLOYMENTBUCKETNAME": {
              "Ref": "DeploymentBucketName"
            },
            "DEADLETTERQUEUE": {
              "Fn::If": [
                "UseCoreServices",
                {
                  "Fn::If": [
                    "LambdaSharpCoreDeadLetterQueueIsImported",
                    {
                      "Fn::ImportValue": {
                        "Fn::Sub": [
                          "${DeploymentPrefix}${Import}",
                          {
                            "Import": {
                              "Fn::Select": [
                                "1",
                                {
                                  "Fn::Split": [
                                    "$",
                                    {
                                      "Ref": "LambdaSharpCoreDeadLetterQueue"
                                    }
                                  ]
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "Ref": "LambdaSharpCoreDeadLetterQueue"
                    }
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "STR_EVENTTOPIC": {
              "Ref": "EventTopic"
            },
            "STR_HTTPAPIINVOCATIONTOKEN": {
              "Fn::Base64": {
                "Fn::Select": [
                  "2",
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Ref": "AWS::StackId"
                      }
                    ]
                  }
                ]
              }
            },
            "STR_KEEPALIVERULEARN": {
              "Fn::GetAtt": [
                "KeepAliveRule",
                "Arn"
              ]
            },
            "STR_DATATABLE": {
              "Fn::GetAtt": [
                "DataTable",
                "Arn"
              ]
            },
            "STR_MODULE_ROLE_DEADLETTERQUEUEPOLICY": {
              "Fn::If": [
                "UseCoreServices",
                {
                  "Ref": "ModuleRoleDeadLetterQueuePolicy"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "STR_MODULE_ROLE_SECRETSPOLICY": {
              "Fn::If": [
                "ModuleRoleSecretsPolicyCondition",
                {
                  "Ref": "ModuleRoleSecretsPolicy"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "STR_MODULE_WEBSOCKET_URL": {
              "Fn::Sub": "wss://${ModuleWebSocket}.execute-api.${AWS::Region}.${AWS::URLSuffix}/LATEST"
            }
          }
        },
        "Handler": "BroadcastFunction::LambdaSharp.App.EventBus.BroadcastFunction.Function::FunctionHandlerAsync",
        "MemorySize": "256",
        "Role": {
          "Fn::GetAtt": [
            "ModuleRole",
            "Arn"
          ]
        },
        "Runtime": "dotnetcore3.1",
        "Timeout": "30",
        "TracingConfig": {
          "Mode": {
            "Fn::If": [
              "XRayIsEnabled",
              "Active",
              "PassThrough"
            ]
          }
        }
      }
    },
    "BroadcastFunctionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": "/aws/lambda/${BroadcastFunction}"
        },
        "RetentionInDays": 30
      }
    },
    "BroadcastFunctionPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "BroadcastFunction"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${EventBroadcastApi}/*/$default"
        }
      }
    },
    "KeepAliveRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "rate(1 minute)",
        "Targets": [
          {
            "Id": "EventTopic",
            "Arn": {
              "Ref": "EventTopic"
            }
          }
        ]
      }
    },
    "DataTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          {
            "AttributeName": "PK",
            "AttributeType": "S"
          },
          {
            "AttributeName": "SK",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "PK",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "SK",
            "KeyType": "RANGE"
          }
        ]
      }
    },
    "ModuleRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "ModuleLambdaPrincipal",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "EventTopic",
                  "Effect": "Allow",
                  "Action": [
                    "sns:Subscribe",
                    "sns:Unsubscribe"
                  ],
                  "Resource": {
                    "Ref": "EventTopic"
                  }
                },
                {
                  "Sid": "DataTable",
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:BatchGetItem",
                    "dynamodb:BatchWriteItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:DescribeStream",
                    "dynamodb:DescribeTable",
                    "dynamodb:GetItem",
                    "dynamodb:GetRecords",
                    "dynamodb:GetShardIterator",
                    "dynamodb:PutItem",
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:UpdateItem"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "DataTable",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Join": [
                        "/",
                        [
                          {
                            "Fn::GetAtt": [
                              "DataTable",
                              "Arn"
                            ]
                          },
                          "stream/*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "/",
                        [
                          {
                            "Fn::GetAtt": [
                              "DataTable",
                              "Arn"
                            ]
                          },
                          "index/*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Sid": "LogStream",
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Sid": "CloudFormation",
                  "Effect": "Allow",
                  "Action": [
                    "cloudformation:DescribeStacks"
                  ],
                  "Resource": {
                    "Ref": "AWS::StackId"
                  }
                },
                {
                  "Sid": "AWSXRay",
                  "Effect": "Allow",
                  "Action": [
                    "xray:GetSamplingRules",
                    "xray:GetSamplingStatisticSummaries",
                    "xray:GetSamplingTargets",
                    "xray:PutTelemetryRecords",
                    "xray:PutTraceSegments"
                  ],
                  "Resource": "*"
                },
                {
                  "Sid": "EventBus",
                  "Effect": "Allow",
                  "Action": [
                    "events:PutEvents"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default"
                  }
                },
                {
                  "Sid": "DeploymentBucketReadOnly",
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:${AWS::Partition}:s3:::${DeploymentBucketName}/<%MODULE_ORIGIN%>/LambdaSharp/App.EventBus/.artifacts/*"
                  }
                },
                {
                  "Sid": "WebSocketConnections",
                  "Effect": "Allow",
                  "Action": [
                    "execute-api:ManageConnections"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ModuleWebSocket}/LATEST/POST/@connections/*"
                  }
                }
              ]
            },
            "PolicyName": {
              "Fn::Sub": "${AWS::StackName}ModulePolicy"
            }
          }
        ]
      }
    },
    "ModuleRoleDeadLetterQueuePolicy": {
      "Type": "AWS::IAM::Policy",
      "Condition": "UseCoreServices",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "DeadLetterQueue",
              "Effect": "Allow",
              "Action": [
                "sqs:SendMessage"
              ],
              "Resource": {
                "Fn::If": [
                  "UseCoreServices",
                  {
                    "Fn::If": [
                      "LambdaSharpCoreDeadLetterQueueIsImported",
                      {
                        "Fn::ImportValue": {
                          "Fn::Sub": [
                            "${DeploymentPrefix}${Import}",
                            {
                              "Import": {
                                "Fn::Select": [
                                  "1",
                                  {
                                    "Fn::Split": [
                                      "$",
                                      {
                                        "Ref": "LambdaSharpCoreDeadLetterQueue"
                                      }
                                    ]
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "Ref": "LambdaSharpCoreDeadLetterQueue"
                      }
                    ]
                  },
                  {
                    "Ref": "AWS::NoValue"
                  }
                ]
              }
            }
          ]
        },
        "PolicyName": {
          "Fn::Sub": "${AWS::StackName}ModuleRoleDeadLetterQueue"
        },
        "Roles": [
          {
            "Ref": "ModuleRole"
          }
        ]
      }
    },
    "ModuleRoleSecretsPolicy": {
      "Type": "AWS::IAM::Policy",
      "Condition": "ModuleRoleSecretsPolicyCondition",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "Secrets",
              "Effect": "Allow",
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt"
              ],
              "Resource": {
                "Fn::Split": [
                  ",",
                  {
                    "Ref": "Secrets"
                  }
                ]
              }
            }
          ]
        },
        "PolicyName": {
          "Fn::Sub": "${AWS::StackName}ModuleRoleSecrets"
        },
        "Roles": [
          {
            "Ref": "ModuleRole"
          }
        ]
      }
    },
    "ModuleRegistration": {
      "Type": "Custom::LambdaSharpRegistrationModule",
      "Condition": "UseCoreServices",
      "Properties": {
        "ServiceToken": {
          "Fn::ImportValue": {
            "Fn::Sub": "${DeploymentPrefix}LambdaSharp::Registration::Module"
          }
        },
        "ResourceType": "LambdaSharp::Registration::Module",
        "ModuleInfo": "LambdaSharp.App.EventBus:1.0-DEV@<%MODULE_ORIGIN%>",
        "ModuleId": {
          "Ref": "AWS::StackName"
        }
      }
    },
    "ListenerFunctionRegistration": {
      "Type": "Custom::LambdaSharpRegistrationFunction",
      "Condition": "UseCoreServices",
      "Properties": {
        "ServiceToken": {
          "Fn::ImportValue": {
            "Fn::Sub": "${DeploymentPrefix}LambdaSharp::Registration::Function"
          }
        },
        "ResourceType": "LambdaSharp::Registration::Function",
        "ModuleId": {
          "Ref": "AWS::StackName"
        },
        "FunctionId": {
          "Ref": "ListenerFunction"
        },
        "FunctionName": "ListenerFunction",
        "FunctionLogGroupName": {
          "Fn::Sub": "/aws/lambda/${ListenerFunction}"
        },
        "FunctionPlatform": "AWS Lambda",
        "FunctionFramework": "dotnetcore3.1",
        "FunctionLanguage": "csharp",
        "FunctionMaxMemory": "256",
        "FunctionMaxDuration": "30"
      },
      "DependsOn": [
        "ModuleRegistration"
      ]
    },
    "ListenerFunctionLogGroupSubscription": {
      "Type": "AWS::Logs::SubscriptionFilter",
      "Condition": "UseCoreServices",
      "Properties": {
        "DestinationArn": {
          "Fn::If": [
            "UseCoreServices",
            {
              "Fn::If": [
                "LambdaSharpCoreLoggingStreamIsImported",
                {
                  "Fn::ImportValue": {
                    "Fn::Sub": [
                      "${DeploymentPrefix}${Import}",
                      {
                        "Import": {
                          "Fn::Select": [
                            "1",
                            {
                              "Fn::Split": [
                                "$",
                                {
                                  "Ref": "LambdaSharpCoreLoggingStream"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "Ref": "LambdaSharpCoreLoggingStream"
                }
              ]
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "FilterPattern": "-\"*** \"",
        "LogGroupName": {
          "Ref": "ListenerFunctionLogGroup"
        },
        "RoleArn": {
          "Fn::If": [
            "UseCoreServices",
            {
              "Fn::If": [
                "LambdaSharpCoreLoggingStreamRoleIsImported",
                {
                  "Fn::ImportValue": {
                    "Fn::Sub": [
                      "${DeploymentPrefix}${Import}",
                      {
                        "Import": {
                          "Fn::Select": [
                            "1",
                            {
                              "Fn::Split": [
                                "$",
                                {
                                  "Ref": "LambdaSharpCoreLoggingStreamRole"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "Ref": "LambdaSharpCoreLoggingStreamRole"
                }
              ]
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        }
      }
    },
    "BroadcastFunctionRegistration": {
      "Type": "Custom::LambdaSharpRegistrationFunction",
      "Condition": "UseCoreServices",
      "Properties": {
        "ServiceToken": {
          "Fn::ImportValue": {
            "Fn::Sub": "${DeploymentPrefix}LambdaSharp::Registration::Function"
          }
        },
        "ResourceType": "LambdaSharp::Registration::Function",
        "ModuleId": {
          "Ref": "AWS::StackName"
        },
        "FunctionId": {
          "Ref": "BroadcastFunction"
        },
        "FunctionName": "BroadcastFunction",
        "FunctionLogGroupName": {
          "Fn::Sub": "/aws/lambda/${BroadcastFunction}"
        },
        "FunctionPlatform": "AWS Lambda",
        "FunctionFramework": "dotnetcore3.1",
        "FunctionLanguage": "csharp",
        "FunctionMaxMemory": "256",
        "FunctionMaxDuration": "30"
      },
      "DependsOn": [
        "ModuleRegistration"
      ]
    },
    "BroadcastFunctionLogGroupSubscription": {
      "Type": "AWS::Logs::SubscriptionFilter",
      "Condition": "UseCoreServices",
      "Properties": {
        "DestinationArn": {
          "Fn::If": [
            "UseCoreServices",
            {
              "Fn::If": [
                "LambdaSharpCoreLoggingStreamIsImported",
                {
                  "Fn::ImportValue": {
                    "Fn::Sub": [
                      "${DeploymentPrefix}${Import}",
                      {
                        "Import": {
                          "Fn::Select": [
                            "1",
                            {
                              "Fn::Split": [
                                "$",
                                {
                                  "Ref": "LambdaSharpCoreLoggingStream"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "Ref": "LambdaSharpCoreLoggingStream"
                }
              ]
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "FilterPattern": "-\"*** \"",
        "LogGroupName": {
          "Ref": "BroadcastFunctionLogGroup"
        },
        "RoleArn": {
          "Fn::If": [
            "UseCoreServices",
            {
              "Fn::If": [
                "LambdaSharpCoreLoggingStreamRoleIsImported",
                {
                  "Fn::ImportValue": {
                    "Fn::Sub": [
                      "${DeploymentPrefix}${Import}",
                      {
                        "Import": {
                          "Fn::Select": [
                            "1",
                            {
                              "Fn::Split": [
                                "$",
                                {
                                  "Ref": "LambdaSharpCoreLoggingStreamRole"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "Ref": "LambdaSharpCoreLoggingStreamRole"
                }
              ]
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        }
      }
    },
    "ModuleWebSocket": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": {
          "Fn::Sub": "${AWS::StackName} Module WebSocket"
        },
        "ProtocolType": "WEBSOCKET",
        "Description": "LambdaSharp.App.EventBus WebSocket (v1.0-DEV)",
        "RouteSelectionExpression": "$request.body.Action"
      }
    },
    "ListenerFunctionWebSocketIntegration": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "ModuleWebSocket"
        },
        "Description": "WebSocket Integration for 'ListenerFunction'",
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListenerFunction.Arn}/invocations"
        },
        "PassthroughBehavior": "WHEN_NO_TEMPLATES"
      }
    },
    "ListenerFunctionConnectRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "ModuleWebSocket"
        },
        "RouteKey": "$connect",
        "AuthorizationType": "NONE",
        "Target": {
          "Fn::Sub": "integrations/${ListenerFunctionWebSocketIntegration}"
        }
      }
    },
    "ListenerFunctionWebSocketPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "ListenerFunction"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ModuleWebSocket}/LATEST/*"
        }
      }
    },
    "ListenerFunctionDisconnectRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "ModuleWebSocket"
        },
        "RouteKey": "$disconnect",
        "AuthorizationType": "NONE",
        "Target": {
          "Fn::Sub": "integrations/${ListenerFunctionWebSocketIntegration}"
        }
      }
    },
    "ListenerFunctionHelloRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "ModuleWebSocket"
        },
        "RouteKey": "Hello",
        "AuthorizationType": "NONE",
        "Target": {
          "Fn::Sub": "integrations/${ListenerFunctionWebSocketIntegration}"
        }
      }
    },
    "ListenerFunctionSubscribeRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "ModuleWebSocket"
        },
        "RouteKey": "Subscribe",
        "AuthorizationType": "NONE",
        "Target": {
          "Fn::Sub": "integrations/${ListenerFunctionWebSocketIntegration}"
        }
      }
    },
    "ListenerFunctionUnsubscribeRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "ModuleWebSocket"
        },
        "RouteKey": "Unsubscribe",
        "AuthorizationType": "NONE",
        "Target": {
          "Fn::Sub": "integrations/${ListenerFunctionWebSocketIntegration}"
        }
      }
    },
    "ModuleWebSocketDeployment1178B9490007407E61490424D43880CE": {
      "Type": "AWS::ApiGatewayV2::Deployment",
      "Properties": {
        "ApiId": {
          "Ref": "ModuleWebSocket"
        },
        "Description": {
          "Fn::Sub": "${AWS::StackName} WebSocket [1178B9490007407E61490424D43880CE]"
        }
      },
      "DependsOn": [
        "ListenerFunctionConnectRoute",
        "ListenerFunctionDisconnectRoute",
        "ListenerFunctionHelloRoute",
        "ListenerFunctionSubscribeRoute",
        "ListenerFunctionUnsubscribeRoute",
        "ListenerFunctionWebSocketIntegration"
      ]
    },
    "ModuleWebSocketLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": 30
      }
    },
    "ModuleWebSocketStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "AccessLogSettings": {
          "DestinationArn": {
            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${ModuleWebSocketLogGroup}"
          },
          "Format": "{\"requestId\":\"$context.requestId\",\"extendedRequestId\":\"$context.extendedRequestId\",\"ip\":\"$context.identity.sourceIp\",\"caller\":\"$context.identity.caller\",\"user\":\"$context.identity.user\",\"apiKeyId\":\"$context.identity.apiKeyId\",\"domainName\":\"$context.domainName\",\"requestTime\":\"$context.requestTime\",\"eventType\":\"$context.eventType\",\"apiId\":\"$context.apiId\",\"stage\":\"$context.stage\",\"connectionId\":\"$context.connectionId\",\"route\":\"$context.routeKey\",\"error\":\"$context.error.message\"}"
        },
        "ApiId": {
          "Ref": "ModuleWebSocket"
        },
        "StageName": "LATEST",
        "Description": "Module WebSocket LATEST Stage",
        "DeploymentId": {
          "Ref": "ModuleWebSocketDeployment1178B9490007407E61490424D43880CE"
        },
        "RouteSettings": {
          "$connect": {
            "DataTraceEnabled": true,
            "DetailedMetricsEnabled": true,
            "LoggingLevel": "INFO"
          },
          "$disconnect": {
            "DataTraceEnabled": true,
            "DetailedMetricsEnabled": true,
            "LoggingLevel": "INFO"
          },
          "Hello": {
            "DataTraceEnabled": true,
            "DetailedMetricsEnabled": true,
            "LoggingLevel": "INFO"
          },
          "Subscribe": {
            "DataTraceEnabled": true,
            "DetailedMetricsEnabled": true,
            "LoggingLevel": "INFO"
          },
          "Unsubscribe": {
            "DataTraceEnabled": true,
            "DetailedMetricsEnabled": true,
            "LoggingLevel": "INFO"
          }
        }
      },
      "DependsOn": [
        "ModuleWebSocketLogGroup"
      ]
    }
  },
  "Outputs": {
    "EventTopicArn": {
      "Value": {
        "Ref": "EventTopic"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}::EventTopicArn"
        }
      },
      "Description": "SNS topic ARN for broadcasting events to the app event bus"
    },
    "Url": {
      "Value": {
        "Fn::Sub": "wss://${ModuleWebSocket}.execute-api.${AWS::Region}.${AWS::URLSuffix}/LATEST"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}::Url"
        }
      },
      "Description": "WebSocket URL for connecting to the app event bus"
    },
    "ApiKey": {
      "Value": {
        "Fn::Base64": {
          "Fn::Select": [
            "2",
            {
              "Fn::Split": [
                "/",
                {
                  "Ref": "AWS::StackId"
                }
              ]
            }
          ]
        }
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}::ApiKey"
        }
      },
      "Description": "App event bus API Key"
    },
    "ModuleInfo": {
      "Value": "LambdaSharp.App.EventBus:1.0-DEV@<%MODULE_ORIGIN%>"
    },
    "ModuleChecksum": {
      "Value": {
        "Ref": "DeploymentChecksum"
      }
    },
    "LambdaSharpTool": {
      "Value": "1.0.0"
    },
    "LambdaSharpTier": {
      "Value": {
        "Fn::Select": [
          "0",
          {
            "Fn::Split": [
              "-",
              {
                "Ref": "DeploymentPrefix"
              }
            ]
          }
        ]
      }
    }
  },
  "Conditions": {
    "DevModeIsEnabled": {
      "Fn::Equals": [
        {
          "Ref": "DevMode"
        },
        "Enabled"
      ]
    },
    "XRayIsEnabled": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "XRayTracing"
            },
            "Disabled"
          ]
        }
      ]
    },
    "UseCoreServices": {
      "Fn::Equals": [
        {
          "Ref": "LambdaSharpCoreServices"
        },
        "Enabled"
      ]
    },
    "LambdaSharpCoreDeadLetterQueueIsImported": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "LambdaSharpCoreDeadLetterQueue"
                },
                ""
              ]
            }
          ]
        },
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                "0",
                {
                  "Fn::Split": [
                    "$",
                    {
                      "Ref": "LambdaSharpCoreDeadLetterQueue"
                    }
                  ]
                }
              ]
            },
            ""
          ]
        }
      ]
    },
    "LambdaSharpCoreLoggingStreamIsImported": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "LambdaSharpCoreLoggingStream"
                },
                ""
              ]
            }
          ]
        },
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                "0",
                {
                  "Fn::Split": [
                    "$",
                    {
                      "Ref": "LambdaSharpCoreLoggingStream"
                    }
                  ]
                }
              ]
            },
            ""
          ]
        }
      ]
    },
    "LambdaSharpCoreLoggingStreamRoleIsImported": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "LambdaSharpCoreLoggingStreamRole"
                },
                ""
              ]
            }
          ]
        },
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                "0",
                {
                  "Fn::Split": [
                    "$",
                    {
                      "Ref": "LambdaSharpCoreLoggingStreamRole"
                    }
                  ]
                }
              ]
            },
            ""
          ]
        }
      ]
    },
    "ModuleRoleSecretsPolicyCondition": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "Secrets"
            },
            ""
          ]
        }
      ]
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterLabels": {
        "AppVersionId": {
          "default": "App version identifier [String]"
        },
        "DevMode": {
          "default": "Developer mode relaxes WebSocket authentication [String]"
        },
        "Secrets": {
          "default": "Comma-separated list of additional KMS secret keys [String]"
        },
        "XRayTracing": {
          "default": "Enable AWS X-Ray tracing mode for module resources [String]"
        },
        "LambdaSharpCoreServices": {
          "default": "Integrate with LambdaSharp.Core services [String]"
        },
        "LambdaSharpCoreDeadLetterQueue": {
          "default": "DeadLetterQueue [String]"
        },
        "LambdaSharpCoreLoggingStream": {
          "default": "LoggingStream [String]"
        },
        "LambdaSharpCoreLoggingStreamRole": {
          "default": "LoggingStreamRole [String]"
        },
        "DeploymentBucketName": {
          "default": "Deployment S3 bucket name [String]"
        },
        "DeploymentPrefix": {
          "default": "Deployment tier prefix [String]"
        },
        "DeploymentPrefixLowercase": {
          "default": "Deployment tier prefix (lowercase) [String]"
        },
        "DeploymentRoot": {
          "default": "Root stack name for nested deployments, blank otherwise [String]"
        },
        "DeploymentChecksum": {
          "default": "CloudFormation template MD5 checksum [String]"
        }
      },
      "ParameterGroups": [
        {
          "Label": {
            "default": "Module Settings"
          },
          "Parameters": [
            "AppVersionId",
            "DevMode"
          ]
        },
        {
          "Label": {
            "default": "LambdaSharp Module Options"
          },
          "Parameters": [
            "Secrets",
            "XRayTracing",
            "LambdaSharpCoreServices"
          ]
        },
        {
          "Label": {
            "default": "LambdaSharp.Core Imports"
          },
          "Parameters": [
            "LambdaSharpCoreDeadLetterQueue",
            "LambdaSharpCoreLoggingStream",
            "LambdaSharpCoreLoggingStreamRole"
          ]
        },
        {
          "Label": {
            "default": "LambdaSharp Deployment Settings (DO NOT MODIFY)"
          },
          "Parameters": [
            "DeploymentBucketName",
            "DeploymentPrefix",
            "DeploymentPrefixLowercase",
            "DeploymentRoot",
            "DeploymentChecksum"
          ]
        }
      ]
    },
    "LambdaSharp::Manifest": {
      "Version": "2019-07-04",
      "Module": "LambdaSharp.App.EventBus:1.0-DEV",
      "Description": "Connect LambdaSharp app to CloudWatch EventBridge",
      "TemplateChecksum": "BFD9A31ED8B3C15C4A4B5BA39EB61B70",
      "Date": "2019-08-09T15:00:00Z",
      "CoreServicesVersion": "1",
      "ParameterSections": [
        {
          "Title": "Module Settings",
          "Parameters": [
            {
              "Name": "AppVersionId",
              "Type": "String"
            },
            {
              "Name": "DevMode",
              "Type": "String",
              "Default": "Disabled",
              "AllowedValues": [
                "Enabled",
                "Disabled"
              ]
            }
          ]
        },
        {
          "Title": "LambdaSharp Module Options",
          "Parameters": [
            {
              "Name": "Secrets",
              "Type": "String",
              "Label": "Comma-separated list of additional KMS secret keys",
              "Default": ""
            },
            {
              "Name": "XRayTracing",
              "Type": "String",
              "Label": "Enable AWS X-Ray tracing mode for module resources",
              "Default": "Disabled",
              "AllowedValues": [
                "Disabled",
                "RootModule",
                "AllModules"
              ]
            },
            {
              "Name": "LambdaSharpCoreServices",
              "Type": "String",
              "Label": "Integrate with LambdaSharp.Core services",
              "Default": "Disabled",
              "AllowedValues": [
                "Disabled",
                "Enabled"
              ]
            }
          ]
        },
        {
          "Title": "LambdaSharp.Core Imports",
          "Parameters": [
            {
              "Name": "LambdaSharpCoreDeadLetterQueue",
              "Type": "String",
              "Label": "DeadLetterQueue",
              "Default": "$LambdaSharp-Core::DeadLetterQueue",
              "Import": "LambdaSharp.Core::DeadLetterQueue",
              "AllowedPattern": "^.+$",
              "ConstraintDescription": "must either be a cross-module reference or a non-empty value"
            },
            {
              "Name": "LambdaSharpCoreLoggingStream",
              "Type": "String",
              "Label": "LoggingStream",
              "Default": "$LambdaSharp-Core::LoggingStream",
              "Import": "LambdaSharp.Core::LoggingStream",
              "AllowedPattern": "^.+$",
              "ConstraintDescription": "must either be a cross-module reference or a non-empty value"
            },
            {
              "Name": "LambdaSharpCoreLoggingStreamRole",
              "Type": "String",
              "Label": "LoggingStreamRole",
              "Default": "$LambdaSharp-Core::LoggingStreamRole",
              "Import": "LambdaSharp.Core::LoggingStreamRole",
              "AllowedPattern": "^.+$",
              "ConstraintDescription": "must either be a cross-module reference or a non-empty value"
            }
          ]
        }
      ],
      "Git": {
        "Branch": "test-branch",
        "SHA": "0123456789ABCDEF0123456789ABCDEF01234567"
      },
      "Artifacts": [],
      "Dependencies": [],
      "ResourceTypes": [],
      "Outputs": [
        {
          "Name": "ApiKey",
          "Description": "App event bus API Key",
          "Type": "String"
        },
        {
          "Name": "EventTopicArn",
          "Description": "SNS topic ARN for broadcasting events to the app event bus",
          "Type": "String"
        },
        {
          "Name": "Url",
          "Description": "WebSocket URL for connecting to the app event bus",
          "Type": "String"
        }
      ]
    },
    "LambdaSharp::NameMappings": {
      "Version": "2019-07-04",
      "ResourceNameMappings": {
        "ListenerFunctionLogGroup": "ListenerFunction::LogGroup",
        "BroadcastFunctionLogGroup": "BroadcastFunction::LogGroup",
        "ModuleRole": "Module::Role",
        "ModuleRoleDeadLetterQueuePolicy": "Module::Role::DeadLetterQueuePolicy",
        "ModuleRoleSecretsPolicy": "Module::Role::SecretsPolicy",
        "ModuleRegistration": "Module::Registration",
        "ListenerFunctionRegistration": "ListenerFunction::Registration",
        "ListenerFunctionLogGroupSubscription": "ListenerFunction::LogGroupSubscription",
        "BroadcastFunctionRegistration": "BroadcastFunction::Registration",
        "BroadcastFunctionLogGroupSubscription": "BroadcastFunction::LogGroupSubscription",
        "ModuleWebSocket": "Module::WebSocket",
        "ListenerFunctionWebSocketIntegration": "ListenerFunction::WebSocketIntegration",
        "ListenerFunctionConnectRoute": "ListenerFunction::ConnectRoute",
        "ListenerFunctionWebSocketPermission": "ListenerFunction::WebSocketPermission",
        "ListenerFunctionDisconnectRoute": "ListenerFunction::DisconnectRoute",
        "ListenerFunctionHelloRoute": "ListenerFunction::HelloRoute",
        "ListenerFunctionSubscribeRoute": "ListenerFunction::SubscribeRoute",
        "ListenerFunctionUnsubscribeRoute": "ListenerFunction::UnsubscribeRoute",
        "ModuleWebSocketDeployment1178B9490007407E61490424D43880CE": "Module::WebSocket::Deployment1178B9490007407E61490424D43880CE",
        "ModuleWebSocketLogGroup": "Module::WebSocket::LogGroup",
        "ModuleWebSocketStage": "Module::WebSocket::Stage"
      },
      "TypeNameMappings": {
        "Custom::LambdaSharpRegistrationModule": "LambdaSharp::Registration::Module",
        "Custom::LambdaSharpRegistrationFunction": "LambdaSharp::Registration::Function"
      }
    }
  }
}