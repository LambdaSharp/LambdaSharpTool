{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Listen for specific tweets and publish to an email address via SNS topic (v1.0-DEV)",
  "Parameters": {
    "TwitterApiKey": {
      "Type": "String",
      "Description": "This parameter sets the encrypted API key for accessing Twitter"
    },
    "TwitterApiSecretKey": {
      "Type": "String",
      "Description": "This parameter sets the encrypted secret API key for accessing Twitter"
    },
    "TwitterQuery": {
      "Type": "String",
      "Description": "This parameter sets the search query for finding tweets",
      "AllowedPattern": ".+",
      "ConstraintDescription": "Search query must be a non-empty string"
    },
    "TwitterLanguageFilter": {
      "Type": "String",
      "Description": "This parameter is a comma-delimited list of ISO 639-1 language filters for tweets (empty value disables filter)",
      "Default": "en"
    },
    "TwitterSentimentFilter": {
      "Type": "String",
      "Description": "This parameter sets the sentiment filter (one of: SKIP, POSITIVE, NEUTRAL, NEGATIVE, MIXED, ALL)",
      "AllowedValues": [
        "SKIP",
        "POSITIVE",
        "NEUTRAL",
        "NEGATIVE",
        "MIXED",
        "ALL"
      ],
      "Default": "SKIP"
    },
    "NotificationEmail": {
      "Type": "String",
      "Description": "This parameter sets the notification email for found tweets",
      "AllowedPattern": ".+@.+",
      "ConstraintDescription": "Must be a valid email address"
    },
    "Secrets": {
      "Type": "String",
      "Description": "Secret Keys (ARNs)",
      "Default": ""
    },
    "XRayTracing": {
      "Type": "String",
      "Description": "AWS X-Ray Tracing",
      "AllowedValues": [
        "Disabled",
        "RootModule",
        "AllModules"
      ],
      "Default": "Disabled"
    },
    "LambdaSharpCoreServices": {
      "Type": "String",
      "Description": "Use LambdaSharp.Core Services",
      "AllowedValues": [
        "Disabled",
        "Enabled"
      ],
      "Default": "Disabled"
    },
    "LambdaSharpCoreDeadLetterQueue": {
      "Type": "String",
      "Description": "Cross-module reference for LambdaSharp.Core::DeadLetterQueue",
      "AllowedPattern": "^.+$",
      "ConstraintDescription": "must either be a cross-module reference or a non-empty value",
      "Default": "$LambdaSharp-Core::DeadLetterQueue"
    },
    "LambdaSharpCoreLoggingStream": {
      "Type": "String",
      "Description": "Cross-module reference for LambdaSharp.Core::LoggingStream",
      "AllowedPattern": "^.+$",
      "ConstraintDescription": "must either be a cross-module reference or a non-empty value",
      "Default": "$LambdaSharp-Core::LoggingStream"
    },
    "LambdaSharpCoreLoggingStreamRole": {
      "Type": "String",
      "Description": "Cross-module reference for LambdaSharp.Core::LoggingStreamRole",
      "AllowedPattern": "^.+$",
      "ConstraintDescription": "must either be a cross-module reference or a non-empty value",
      "Default": "$LambdaSharp-Core::LoggingStreamRole"
    },
    "DeploymentBucketName": {
      "Type": "String",
      "Description": "Deployment S3 Bucket Name"
    },
    "DeploymentPrefix": {
      "Type": "String",
      "Description": "Deployment Tier Prefix"
    },
    "DeploymentPrefixLowercase": {
      "Type": "String",
      "Description": "Deployment Tier Prefix (lowercase)"
    },
    "DeploymentRoot": {
      "Type": "String",
      "Description": "Root Stack Name",
      "Default": ""
    },
    "DeploymentChecksum": {
      "Type": "String",
      "Description": "Deployment Checksum",
      "Default": "041B939466EFBBED03B243821506E76B"
    }
  },
  "Resources": {
    "TwitterNotify": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "NotificationARNs": {
          "Ref": "AWS::NotificationARNs"
        },
        "Parameters": {
          "TwitterApiKey": {
            "Ref": "TwitterApiKey"
          },
          "TwitterApiSecretKey": {
            "Ref": "TwitterApiSecretKey"
          },
          "TwitterQuery": {
            "Ref": "TwitterQuery"
          },
          "TwitterLanguageFilter": {
            "Ref": "TwitterLanguageFilter"
          },
          "TwitterSentimentFilter": {
            "Ref": "TwitterSentimentFilter"
          },
          "Secrets": {
            "Ref": "Secrets"
          },
          "DeploymentBucketName": {
            "Ref": "DeploymentBucketName"
          },
          "DeploymentPrefix": {
            "Ref": "DeploymentPrefix"
          },
          "DeploymentPrefixLowercase": {
            "Ref": "DeploymentPrefixLowercase"
          },
          "DeploymentRoot": {
            "Fn::If": [
              "ModuleIsNested",
              {
                "Ref": "DeploymentRoot"
              },
              {
                "Ref": "AWS::StackName"
              }
            ]
          },
          "LambdaSharpCoreServices": {
            "Ref": "LambdaSharpCoreServices"
          }
        },
        "Tags": [
          {
            "Key": "LambdaSharp:Module",
            "Value": "LambdaSharp.Twitter.Query"
          }
        ],
        "TemplateURL": "<BAD>",
        "TimeoutInMinutes": 15
      }
    },
    "FoundTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [
          {
            "Protocol": "email",
            "Endpoint": {
              "Ref": "NotificationEmail"
            }
          }
        ]
      }
    },
    "NotifyFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "DeploymentBucketName"
          },
          "S3Key": "<%MODULE_ORIGIN%>/Demo/TwitterNotifier/.artifacts/NotifyFunction-DRYRUN.zip"
        },
        "DeadLetterConfig": {
          "TargetArn": {
            "Fn::If": [
              "UseCoreServices",
              {
                "Fn::If": [
                  "LambdaSharpCoreDeadLetterQueueIsImported",
                  {
                    "Fn::ImportValue": {
                      "Fn::Sub": [
                        "${DeploymentPrefix}${Import}",
                        {
                          "Import": {
                            "Fn::Select": [
                              "1",
                              {
                                "Fn::Split": [
                                  "$",
                                  {
                                    "Ref": "LambdaSharpCoreDeadLetterQueue"
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      ]
                    }
                  },
                  {
                    "Ref": "LambdaSharpCoreDeadLetterQueue"
                  }
                ]
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        },
        "Environment": {
          "Variables": {
            "MODULE_ID": {
              "Ref": "AWS::StackName"
            },
            "MODULE_INFO": "Demo.TwitterNotifier:1.0-DEV",
            "LAMBDA_NAME": "NotifyFunction",
            "LAMBDA_RUNTIME": "dotnetcore2.1",
            "DEPLOYMENTBUCKETNAME": {
              "Ref": "DeploymentBucketName"
            },
            "DEADLETTERQUEUE": {
              "Fn::If": [
                "UseCoreServices",
                {
                  "Fn::If": [
                    "LambdaSharpCoreDeadLetterQueueIsImported",
                    {
                      "Fn::ImportValue": {
                        "Fn::Sub": [
                          "${DeploymentPrefix}${Import}",
                          {
                            "Import": {
                              "Fn::Select": [
                                "1",
                                {
                                  "Fn::Split": [
                                    "$",
                                    {
                                      "Ref": "LambdaSharpCoreDeadLetterQueue"
                                    }
                                  ]
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "Ref": "LambdaSharpCoreDeadLetterQueue"
                    }
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "STR_TWITTERQUERY": {
              "Ref": "TwitterQuery"
            },
            "STR_TWITTERLANGUAGEFILTER": {
              "Ref": "TwitterLanguageFilter"
            },
            "STR_TWITTERSENTIMENTFILTER": {
              "Ref": "TwitterSentimentFilter"
            },
            "STR_FOUNDTOPIC": {
              "Ref": "FoundTopic"
            },
            "STR_MODULE_ROLE_DEADLETTERQUEUEPOLICY": {
              "Fn::If": [
                "UseCoreServices",
                {
                  "Ref": "ModuleRoleDeadLetterQueuePolicy"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "STR_MODULE_ROLE_SECRETSPOLICY": {
              "Fn::If": [
                "ModuleRoleSecretsPolicyCondition",
                {
                  "Ref": "ModuleRoleSecretsPolicy"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          }
        },
        "Handler": "NotifyFunction::Demo.TwitterNotifier.NotifyFunction.Function::FunctionHandlerAsync",
        "MemorySize": "256",
        "Role": {
          "Fn::GetAtt": [
            "ModuleRole",
            "Arn"
          ]
        },
        "Runtime": "dotnetcore2.1",
        "Timeout": "30",
        "TracingConfig": {
          "Mode": {
            "Fn::If": [
              "XRayIsEnabled",
              "Active",
              "PassThrough"
            ]
          }
        }
      }
    },
    "NotifyFunctionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": "/aws/lambda/${NotifyFunction}"
        },
        "RetentionInDays": 30
      }
    },
    "ModuleRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "ModuleLambdaPrincipal",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "TwitterNotifyTopic",
                  "Effect": "Allow",
                  "Action": [
                    "sns:Subscribe"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [
                      "TwitterNotify",
                      "Outputs.TweetTopic"
                    ]
                  }
                },
                {
                  "Sid": "FoundTopic",
                  "Effect": "Allow",
                  "Action": [
                    "sns:Publish"
                  ],
                  "Resource": {
                    "Ref": "FoundTopic"
                  }
                },
                {
                  "Sid": "LogStream",
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Sid": "CloudFormation",
                  "Effect": "Allow",
                  "Action": [
                    "cloudformation:DescribeStacks"
                  ],
                  "Resource": {
                    "Ref": "AWS::StackId"
                  }
                },
                {
                  "Sid": "AWSXRay",
                  "Effect": "Allow",
                  "Action": [
                    "xray:GetSamplingRules",
                    "xray:GetSamplingStatisticSummaries",
                    "xray:GetSamplingTargets",
                    "xray:PutTelemetryRecords",
                    "xray:PutTraceSegments"
                  ],
                  "Resource": "*"
                },
                {
                  "Sid": "DeploymentBucketReadOnly",
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:aws:s3:::${DeploymentBucketName}/<%MODULE_ORIGIN%>/Demo/TwitterNotifier/.artifacts/*"
                  }
                }
              ]
            },
            "PolicyName": {
              "Fn::Sub": "${AWS::StackName}ModulePolicy"
            }
          }
        ]
      }
    },
    "ModuleRoleDeadLetterQueuePolicy": {
      "Type": "AWS::IAM::Policy",
      "Condition": "UseCoreServices",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "DeadLetterQueue",
              "Effect": "Allow",
              "Action": [
                "sqs:SendMessage"
              ],
              "Resource": {
                "Fn::If": [
                  "UseCoreServices",
                  {
                    "Fn::If": [
                      "LambdaSharpCoreDeadLetterQueueIsImported",
                      {
                        "Fn::ImportValue": {
                          "Fn::Sub": [
                            "${DeploymentPrefix}${Import}",
                            {
                              "Import": {
                                "Fn::Select": [
                                  "1",
                                  {
                                    "Fn::Split": [
                                      "$",
                                      {
                                        "Ref": "LambdaSharpCoreDeadLetterQueue"
                                      }
                                    ]
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "Ref": "LambdaSharpCoreDeadLetterQueue"
                      }
                    ]
                  },
                  {
                    "Ref": "AWS::NoValue"
                  }
                ]
              }
            }
          ]
        },
        "PolicyName": {
          "Fn::Sub": "${AWS::StackName}ModuleRoleDeadLetterQueue"
        },
        "Roles": [
          {
            "Ref": "ModuleRole"
          }
        ]
      }
    },
    "ModuleRoleSecretsPolicy": {
      "Type": "AWS::IAM::Policy",
      "Condition": "ModuleRoleSecretsPolicyCondition",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "Secrets",
              "Effect": "Allow",
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt"
              ],
              "Resource": {
                "Fn::Split": [
                  ",",
                  {
                    "Ref": "Secrets"
                  }
                ]
              }
            }
          ]
        },
        "PolicyName": {
          "Fn::Sub": "${AWS::StackName}ModuleRoleSecrets"
        },
        "Roles": [
          {
            "Ref": "ModuleRole"
          }
        ]
      }
    },
    "ModuleRegistration": {
      "Type": "Custom::LambdaSharpRegistrationModule",
      "Condition": "UseCoreServices",
      "Properties": {
        "ServiceToken": {
          "Fn::ImportValue": {
            "Fn::Sub": "${DeploymentPrefix}LambdaSharp::Registration::Module"
          }
        },
        "ResourceType": "LambdaSharp::Registration::Module",
        "Module": "Demo.TwitterNotifier:1.0-DEV",
        "ModuleId": {
          "Ref": "AWS::StackName"
        }
      }
    },
    "NotifyFunctionRegistration": {
      "Type": "Custom::LambdaSharpRegistrationFunction",
      "Condition": "UseCoreServices",
      "Properties": {
        "ServiceToken": {
          "Fn::ImportValue": {
            "Fn::Sub": "${DeploymentPrefix}LambdaSharp::Registration::Function"
          }
        },
        "ResourceType": "LambdaSharp::Registration::Function",
        "ModuleId": {
          "Ref": "AWS::StackName"
        },
        "FunctionId": {
          "Ref": "NotifyFunction"
        },
        "FunctionName": "NotifyFunction",
        "FunctionLogGroupName": {
          "Fn::Sub": "/aws/lambda/${NotifyFunction}"
        },
        "FunctionPlatform": "AWS Lambda",
        "FunctionFramework": "dotnetcore2.1",
        "FunctionLanguage": "csharp",
        "FunctionMaxMemory": "256",
        "FunctionMaxDuration": "30"
      },
      "DependsOn": [
        "ModuleRegistration"
      ]
    },
    "NotifyFunctionLogGroupSubscription": {
      "Type": "AWS::Logs::SubscriptionFilter",
      "Condition": "UseCoreServices",
      "Properties": {
        "DestinationArn": {
          "Fn::If": [
            "UseCoreServices",
            {
              "Fn::If": [
                "LambdaSharpCoreLoggingStreamIsImported",
                {
                  "Fn::ImportValue": {
                    "Fn::Sub": [
                      "${DeploymentPrefix}${Import}",
                      {
                        "Import": {
                          "Fn::Select": [
                            "1",
                            {
                              "Fn::Split": [
                                "$",
                                {
                                  "Ref": "LambdaSharpCoreLoggingStream"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "Ref": "LambdaSharpCoreLoggingStream"
                }
              ]
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        },
        "FilterPattern": "-\"*** \"",
        "LogGroupName": {
          "Ref": "NotifyFunctionLogGroup"
        },
        "RoleArn": {
          "Fn::If": [
            "UseCoreServices",
            {
              "Fn::If": [
                "LambdaSharpCoreLoggingStreamRoleIsImported",
                {
                  "Fn::ImportValue": {
                    "Fn::Sub": [
                      "${DeploymentPrefix}${Import}",
                      {
                        "Import": {
                          "Fn::Select": [
                            "1",
                            {
                              "Fn::Split": [
                                "$",
                                {
                                  "Ref": "LambdaSharpCoreLoggingStreamRole"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "Ref": "LambdaSharpCoreLoggingStreamRole"
                }
              ]
            },
            {
              "Ref": "AWS::NoValue"
            }
          ]
        }
      }
    },
    "NotifyFunctionSource1Subscription": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "Endpoint": {
          "Fn::GetAtt": [
            "NotifyFunction",
            "Arn"
          ]
        },
        "Protocol": "lambda",
        "TopicArn": {
          "Fn::GetAtt": [
            "TwitterNotify",
            "Outputs.TweetTopic"
          ]
        }
      }
    },
    "NotifyFunctionSource1Permission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "NotifyFunction"
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "TwitterNotify",
            "Outputs.TweetTopic"
          ]
        }
      }
    }
  },
  "Outputs": {
    "Module": {
      "Value": "Demo.TwitterNotifier:1.0-DEV@<%MODULE_ORIGIN%>"
    },
    "ModuleChecksum": {
      "Value": "041B939466EFBBED03B243821506E76B"
    },
    "LambdaSharpTool": {
      "Value": "0.7.0.4"
    },
    "LambdaSharpTier": {
      "Value": {
        "Fn::Select": [
          "0",
          {
            "Fn::Split": [
              "-",
              {
                "Ref": "DeploymentPrefix"
              }
            ]
          }
        ]
      }
    }
  },
  "Conditions": {
    "ModuleIsNested": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "DeploymentRoot"
            },
            ""
          ]
        }
      ]
    },
    "XRayIsEnabled": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "XRayTracing"
            },
            "Disabled"
          ]
        }
      ]
    },
    "UseCoreServices": {
      "Fn::Equals": [
        {
          "Ref": "LambdaSharpCoreServices"
        },
        "Enabled"
      ]
    },
    "LambdaSharpCoreDeadLetterQueueIsImported": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "LambdaSharpCoreDeadLetterQueue"
                },
                ""
              ]
            }
          ]
        },
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                "0",
                {
                  "Fn::Split": [
                    "$",
                    {
                      "Ref": "LambdaSharpCoreDeadLetterQueue"
                    }
                  ]
                }
              ]
            },
            ""
          ]
        }
      ]
    },
    "LambdaSharpCoreLoggingStreamIsImported": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "LambdaSharpCoreLoggingStream"
                },
                ""
              ]
            }
          ]
        },
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                "0",
                {
                  "Fn::Split": [
                    "$",
                    {
                      "Ref": "LambdaSharpCoreLoggingStream"
                    }
                  ]
                }
              ]
            },
            ""
          ]
        }
      ]
    },
    "LambdaSharpCoreLoggingStreamRoleIsImported": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "LambdaSharpCoreLoggingStreamRole"
                },
                ""
              ]
            }
          ]
        },
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                "0",
                {
                  "Fn::Split": [
                    "$",
                    {
                      "Ref": "LambdaSharpCoreLoggingStreamRole"
                    }
                  ]
                }
              ]
            },
            ""
          ]
        }
      ]
    },
    "ModuleRoleSecretsPolicyCondition": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "Secrets"
            },
            ""
          ]
        }
      ]
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterLabels": {
        "TwitterApiKey": {
          "default": "API Key [Secret]"
        },
        "TwitterApiSecretKey": {
          "default": "API Secret Key [Secret]"
        },
        "TwitterQuery": {
          "default": "Search query [String]"
        },
        "TwitterLanguageFilter": {
          "default": "ISO 639-1 Language filters [String]"
        },
        "TwitterSentimentFilter": {
          "default": "This parameter sets the sentiment filter (one of: SKIP, POSITIVE, NEUTRAL, NEGATIVE, MIXED, ALL) [String]"
        },
        "NotificationEmail": {
          "default": "Email address to NotifyFunction with found tweets [String]"
        },
        "Secrets": {
          "default": "Comma-separated list of additional KMS secret keys [String]"
        },
        "XRayTracing": {
          "default": "Enable AWS X-Ray tracing mode for module resources [String]"
        },
        "LambdaSharpCoreServices": {
          "default": "Integrate with LambdaSharp.Core services [String]"
        },
        "LambdaSharpCoreDeadLetterQueue": {
          "default": "DeadLetterQueue [String]"
        },
        "LambdaSharpCoreLoggingStream": {
          "default": "LoggingStream [String]"
        },
        "LambdaSharpCoreLoggingStreamRole": {
          "default": "LoggingStreamRole [String]"
        },
        "DeploymentBucketName": {
          "default": "Deployment S3 bucket name [String]"
        },
        "DeploymentPrefix": {
          "default": "Deployment tier prefix [String]"
        },
        "DeploymentPrefixLowercase": {
          "default": "Deployment tier prefix (lowercase) [String]"
        },
        "DeploymentRoot": {
          "default": "Root stack name for nested deployments, blank otherwise [String]"
        },
        "DeploymentChecksum": {
          "default": "CloudFormation template MD5 checksum [String]"
        }
      },
      "ParameterGroups": [
        {
          "Label": {
            "default": "Twitter Settings"
          },
          "Parameters": [
            "TwitterApiKey",
            "TwitterApiSecretKey",
            "TwitterQuery",
            "TwitterLanguageFilter"
          ]
        },
        {
          "Label": {
            "default": "Module Settings"
          },
          "Parameters": [
            "TwitterSentimentFilter"
          ]
        },
        {
          "Label": {
            "default": "Notification Settings"
          },
          "Parameters": [
            "NotificationEmail"
          ]
        },
        {
          "Label": {
            "default": "LambdaSharp Module Options"
          },
          "Parameters": [
            "Secrets",
            "XRayTracing",
            "LambdaSharpCoreServices"
          ]
        },
        {
          "Label": {
            "default": "LambdaSharp.Core Imports"
          },
          "Parameters": [
            "LambdaSharpCoreDeadLetterQueue",
            "LambdaSharpCoreLoggingStream",
            "LambdaSharpCoreLoggingStreamRole"
          ]
        },
        {
          "Label": {
            "default": "LambdaSharp Deployment Settings (DO NOT MODIFY)"
          },
          "Parameters": [
            "DeploymentBucketName",
            "DeploymentPrefix",
            "DeploymentPrefixLowercase",
            "DeploymentRoot",
            "DeploymentChecksum"
          ]
        }
      ]
    },
    "LambdaSharp::Manifest": {
      "Version": "2019-07-04",
      "Module": "Demo.TwitterNotifier:1.0-DEV",
      "Description": "Listen for specific tweets and publish to an email address via SNS topic",
      "TemplateChecksum": "041B939466EFBBED03B243821506E76B",
      "Date": "2019-08-09T15:00:00Z",
      "CoreServicesVersion": "0.7.0",
      "ParameterSections": [
        {
          "Title": "Twitter Settings",
          "Parameters": [
            {
              "Name": "TwitterApiKey",
              "Type": "Secret",
              "Label": "API Key"
            },
            {
              "Name": "TwitterApiSecretKey",
              "Type": "Secret",
              "Label": "API Secret Key"
            },
            {
              "Name": "TwitterQuery",
              "Type": "String",
              "Label": "Search query",
              "AllowedPattern": ".+",
              "ConstraintDescription": "Search query must be a non-empty string"
            },
            {
              "Name": "TwitterLanguageFilter",
              "Type": "String",
              "Label": "ISO 639-1 Language filters",
              "Default": "en"
            }
          ]
        },
        {
          "Title": "Module Settings",
          "Parameters": [
            {
              "Name": "TwitterSentimentFilter",
              "Type": "String",
              "Default": "SKIP",
              "AllowedValues": [
                "SKIP",
                "POSITIVE",
                "NEUTRAL",
                "NEGATIVE",
                "MIXED",
                "ALL"
              ]
            }
          ]
        },
        {
          "Title": "Notification Settings",
          "Parameters": [
            {
              "Name": "NotificationEmail",
              "Type": "String",
              "Label": "Email address to NotifyFunction with found tweets",
              "AllowedPattern": ".+@.+",
              "ConstraintDescription": "Must be a valid email address"
            }
          ]
        },
        {
          "Title": "LambdaSharp Module Options",
          "Parameters": [
            {
              "Name": "Secrets",
              "Type": "String",
              "Label": "Comma-separated list of additional KMS secret keys",
              "Default": ""
            },
            {
              "Name": "XRayTracing",
              "Type": "String",
              "Label": "Enable AWS X-Ray tracing mode for module resources",
              "Default": "Disabled",
              "AllowedValues": [
                "Disabled",
                "RootModule",
                "AllModules"
              ]
            },
            {
              "Name": "LambdaSharpCoreServices",
              "Type": "String",
              "Label": "Integrate with LambdaSharp.Core services",
              "Default": "Disabled",
              "AllowedValues": [
                "Disabled",
                "Enabled"
              ]
            }
          ]
        },
        {
          "Title": "LambdaSharp.Core Imports",
          "Parameters": [
            {
              "Name": "LambdaSharpCoreDeadLetterQueue",
              "Type": "String",
              "Label": "DeadLetterQueue",
              "Default": "$LambdaSharp-Core::DeadLetterQueue",
              "Import": "LambdaSharp.Core::DeadLetterQueue",
              "AllowedPattern": "^.+$",
              "ConstraintDescription": "must either be a cross-module reference or a non-empty value"
            },
            {
              "Name": "LambdaSharpCoreLoggingStream",
              "Type": "String",
              "Label": "LoggingStream",
              "Default": "$LambdaSharp-Core::LoggingStream",
              "Import": "LambdaSharp.Core::LoggingStream",
              "AllowedPattern": "^.+$",
              "ConstraintDescription": "must either be a cross-module reference or a non-empty value"
            },
            {
              "Name": "LambdaSharpCoreLoggingStreamRole",
              "Type": "String",
              "Label": "LoggingStreamRole",
              "Default": "$LambdaSharp-Core::LoggingStreamRole",
              "Import": "LambdaSharp.Core::LoggingStreamRole",
              "AllowedPattern": "^.+$",
              "ConstraintDescription": "must either be a cross-module reference or a non-empty value"
            }
          ]
        }
      ],
      "Git": {
        "Branch": "test-branch",
        "SHA": "0123456789ABCDEF0123456789ABCDEF01234567"
      },
      "Artifacts": [],
      "Dependencies": [
        {
          "ModuleInfo": "LambdaSharp.Twitter.Query:0.7.0@lambdasharp",
          "Type": "Nested"
        }
      ],
      "ResourceTypes": [],
      "Outputs": []
    },
    "LambdaSharp::NameMappings": {
      "Version": "2019-07-04",
      "ResourceNameMappings": {
        "NotifyFunctionLogGroup": "NotifyFunction::LogGroup",
        "ModuleRole": "Module::Role",
        "ModuleRoleDeadLetterQueuePolicy": "Module::Role::DeadLetterQueuePolicy",
        "ModuleRoleSecretsPolicy": "Module::Role::SecretsPolicy",
        "ModuleRegistration": "Module::Registration",
        "NotifyFunctionRegistration": "NotifyFunction::Registration",
        "NotifyFunctionLogGroupSubscription": "NotifyFunction::LogGroupSubscription",
        "NotifyFunctionSource1Subscription": "NotifyFunction::Source1Subscription",
        "NotifyFunctionSource1Permission": "NotifyFunction::Source1Permission"
      },
      "TypeNameMappings": {
        "Custom::LambdaSharpRegistrationModule": "LambdaSharp::Registration::Module",
        "Custom::LambdaSharpRegistrationFunction": "LambdaSharp::Registration::Function"
      }
    }
  }
}