{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "LambdaSharp CloudFormation Test (v1.0-DEV)",
  "Parameters": {
    "Secrets": {
      "Type": "String",
      "Description": "Secret Keys (ARNs)",
      "Default": ""
    },
    "LambdaSharpCoreServices": {
      "Type": "String",
      "Description": "Use LambdaSharp.Core Services",
      "AllowedValues": [
        "Disabled",
        "Enabled"
      ],
      "Default": "Disabled"
    },
    "DeploymentBucketName": {
      "Type": "String",
      "Description": "Deployment S3 Bucket Name"
    },
    "DeploymentPrefix": {
      "Type": "String",
      "Description": "Deployment Tier Prefix"
    },
    "DeploymentPrefixLowercase": {
      "Type": "String",
      "Description": "Deployment Tier Prefix (lowercase)"
    },
    "DeploymentRoot": {
      "Type": "String",
      "Description": "Root Stack Name",
      "Default": ""
    },
    "DeploymentChecksum": {
      "Type": "String",
      "Description": "Deployment Checksum",
      "Default": "9A60203A1462C04A9FCCE1DE721943FE"
    }
  },
  "Resources": {
    "SecretLiteralVariablePlaintext": {
      "Type": "Custom::ModuleDecryptSecret",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ModuleDecryptSecretFunction",
            "Arn"
          ]
        },
        "ResourceType": "Module::DecryptSecret",
        "Ciphertext": "AQICAHjsMCg1qq6xLyoiDDKeDUPbiR+3YKllMrx6XZvFlIvJkAHz6kXKHJ8Qwq6bIPs8C5JcAAAAYzBhBgkqhkiG9w0BBwagVDBSAgEAME0GCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQM+Iob3r3TN1SXzU6HAgEQgCBiD+FPbVtqL+8yY0HkSQdrKF5+fnaX9yiU1ZLCHz4Ung=="
      }
    },
    "Topic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName": {
          "Fn::GetAtt": [
            "SecretLiteralVariablePlaintext",
            "Plaintext"
          ]
        }
      }
    },
    "ModuleRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "ModuleLambdaPrincipal",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "LogStream",
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Sid": "CloudFormation",
                  "Effect": "Allow",
                  "Action": [
                    "cloudformation:DescribeStacks"
                  ],
                  "Resource": {
                    "Ref": "AWS::StackId"
                  }
                },
                {
                  "Sid": "AWSXRay",
                  "Effect": "Allow",
                  "Action": [
                    "xray:GetSamplingRules",
                    "xray:GetSamplingStatisticSummaries",
                    "xray:GetSamplingTargets",
                    "xray:PutTelemetryRecords",
                    "xray:PutTraceSegments"
                  ],
                  "Resource": "*"
                },
                {
                  "Sid": "DeploymentBucketReadOnly",
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:aws:s3:::${DeploymentBucketName}/<%MODULE_ORIGIN%>/Test/TestModule/.artifacts/*"
                  }
                }
              ]
            },
            "PolicyName": {
              "Fn::Sub": "${AWS::StackName}ModulePolicy"
            }
          }
        ]
      }
    },
    "ModuleDecryptSecretFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "const AWS = require('aws-sdk');\nconst https = require('https');\nconst url = require('url');\nconst kms = new AWS.KMS();\n\nvar logInfo = message => console.log('*** INFO: ' + message);\nvar logError = message => console.log('*** ERROR: ' + message);\n\nexports.handler = (event, context) => {\n    try {\n        logInfo('request: ' + JSON.stringify(event));\n        switch(event.RequestType) {\n        case 'Create':\n        case 'Update':\n            kms.decrypt({\n                CiphertextBlob: new Buffer(event.ResourceProperties.Ciphertext, 'base64')\n            }, (err, result) => {\n                if(err) {\n                    if(err.name == 'InvalidCiphertextException') {\n                        const message = 'Cipher text is not a valid secret';\n                        logError('decrypt failed: ' + message);\n                        send(event, context, 'FAILED', null, message);\n                    } else if(err.name == 'AccessDeniedException') {\n                        logError('decrypt failed: ' + err.message);\n                        send(event, context, 'FAILED', null, err.message);\n                    } else {\n                        logError('decrypt failed: ' + err.toString());\n                        send(event, context, 'FAILED', null, err.toString());\n                    }\n                } else {\n                    send(event, context, 'SUCCESS', {\n                        Plaintext: result.Plaintext.toString('utf8')\n                    });\n                }\n            });\n            break;\n        case 'Delete':\n            send(event, context, 'SUCCESS');\n            break;\n        default:\n            send(event, context, 'FAILED', null, 'unknown request type: ' + event.RequestType);\n            break;\n        }\n    } catch(err) {\n        logError('internal error: ' + err.message + '\\n' + err.stack);\n        send(event, context, 'FAILED', null, 'internal error');\n    }\n};\n\nfunction send(event, context, status, data, reason) {\n    const body = {\n        Status: status,\n        Reason: (status == 'FAILED') ? (reason || 'operation failed') : '',\n        PhysicalResourceId: 'decrypted:' + event.LogicalResourceId,\n        StackId: event.StackId,\n        RequestId: event.RequestId,\n        LogicalResourceId: event.LogicalResourceId,\n        NoEcho: true,\n        Data: '...'\n    };\n    logInfo('response: ' + JSON.stringify(body));\n    body.Data = data;\n    const payload = JSON.stringify(body);\n    const parsedUrl = url.parse(event.ResponseURL);\n    const request = https.request({\n        hostname: parsedUrl.hostname,\n        port: 443,\n        path: parsedUrl.path,\n        method: 'PUT',\n        headers: {\n            'content-type': '',\n            'content-length': payload.length\n        }\n    }, () => {\n        context.done();\n    });\n    request.on('error', error => {\n        logError('send(..) failed executing https.request(..): ' + error);\n        context.done();\n    });\n    request.write(payload);\n    request.end();\n}\n"
        },
        "Description": "Module secret decryption function (v1.0-DEV)",
        "Environment": {
          "Variables": {
            "MODULE_ID": {
              "Ref": "AWS::StackName"
            },
            "MODULE_INFO": "Test.TestModule:1.0-DEV",
            "LAMBDA_NAME": "Module::DecryptSecretFunction",
            "LAMBDA_RUNTIME": "nodejs12.x",
            "DEPLOYMENTBUCKETNAME": {
              "Ref": "DeploymentBucketName"
            },
            "STR_MODULE_ROLE_SECRETSPOLICY": {
              "Fn::If": [
                "ModuleRoleSecretsPolicyCondition",
                {
                  "Ref": "ModuleRoleSecretsPolicy"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          }
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "ModuleRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Timeout": "30"
      }
    },
    "ModuleRoleSecretsPolicy": {
      "Type": "AWS::IAM::Policy",
      "Condition": "ModuleRoleSecretsPolicyCondition",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "Secrets",
              "Effect": "Allow",
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt"
              ],
              "Resource": {
                "Fn::Split": [
                  ",",
                  {
                    "Ref": "Secrets"
                  }
                ]
              }
            }
          ]
        },
        "PolicyName": {
          "Fn::Sub": "${AWS::StackName}ModuleRoleSecrets"
        },
        "Roles": [
          {
            "Ref": "ModuleRole"
          }
        ]
      }
    },
    "ModuleRegistration": {
      "Type": "Custom::LambdaSharpRegistrationModule",
      "Condition": "UseCoreServices",
      "Properties": {
        "ServiceToken": {
          "Fn::ImportValue": {
            "Fn::Sub": "${DeploymentPrefix}LambdaSharp::Registration::Module"
          }
        },
        "ResourceType": "LambdaSharp::Registration::Module",
        "Module": "Test.TestModule:1.0-DEV",
        "ModuleId": {
          "Ref": "AWS::StackName"
        }
      }
    }
  },
  "Outputs": {
    "Module": {
      "Value": "Test.TestModule:1.0-DEV@<%MODULE_ORIGIN%>"
    },
    "ModuleChecksum": {
      "Value": {
        "Ref": "DeploymentChecksum"
      }
    },
    "LambdaSharpTool": {
      "Value": "0.7.0.11"
    },
    "LambdaSharpTier": {
      "Value": {
        "Fn::Select": [
          "0",
          {
            "Fn::Split": [
              "-",
              {
                "Ref": "DeploymentPrefix"
              }
            ]
          }
        ]
      }
    }
  },
  "Conditions": {
    "UseCoreServices": {
      "Fn::Equals": [
        {
          "Ref": "LambdaSharpCoreServices"
        },
        "Enabled"
      ]
    },
    "ModuleRoleSecretsPolicyCondition": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "Secrets"
            },
            ""
          ]
        }
      ]
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterLabels": {
        "Secrets": {
          "default": "Comma-separated list of additional KMS secret keys [String]"
        },
        "LambdaSharpCoreServices": {
          "default": "Integrate with LambdaSharp.Core services [String]"
        },
        "DeploymentBucketName": {
          "default": "Deployment S3 bucket name [String]"
        },
        "DeploymentPrefix": {
          "default": "Deployment tier prefix [String]"
        },
        "DeploymentPrefixLowercase": {
          "default": "Deployment tier prefix (lowercase) [String]"
        },
        "DeploymentRoot": {
          "default": "Root stack name for nested deployments, blank otherwise [String]"
        },
        "DeploymentChecksum": {
          "default": "CloudFormation template MD5 checksum [String]"
        }
      },
      "ParameterGroups": [
        {
          "Label": {
            "default": "LambdaSharp Module Options"
          },
          "Parameters": [
            "Secrets",
            "LambdaSharpCoreServices"
          ]
        },
        {
          "Label": {
            "default": "LambdaSharp Deployment Settings (DO NOT MODIFY)"
          },
          "Parameters": [
            "DeploymentBucketName",
            "DeploymentPrefix",
            "DeploymentPrefixLowercase",
            "DeploymentRoot",
            "DeploymentChecksum"
          ]
        }
      ]
    },
    "LambdaSharp::Manifest": {
      "Version": "2019-07-04",
      "Module": "Test.TestModule:1.0-DEV",
      "Description": "LambdaSharp CloudFormation Test",
      "TemplateChecksum": "9A60203A1462C04A9FCCE1DE721943FE",
      "Date": "2019-08-09T15:00:00Z",
      "CoreServicesVersion": "0.7.0",
      "ParameterSections": [
        {
          "Title": "LambdaSharp Module Options",
          "Parameters": [
            {
              "Name": "Secrets",
              "Type": "String",
              "Label": "Comma-separated list of additional KMS secret keys",
              "Default": ""
            },
            {
              "Name": "LambdaSharpCoreServices",
              "Type": "String",
              "Label": "Integrate with LambdaSharp.Core services",
              "Default": "Disabled",
              "AllowedValues": [
                "Disabled",
                "Enabled"
              ]
            }
          ]
        }
      ],
      "Git": {
        "Branch": "test-branch",
        "SHA": "0123456789ABCDEF0123456789ABCDEF01234567"
      },
      "Artifacts": [],
      "Dependencies": [],
      "ResourceTypes": [],
      "Outputs": []
    },
    "LambdaSharp::NameMappings": {
      "Version": "2019-07-04",
      "ResourceNameMappings": {
        "SecretLiteralVariablePlaintext": "SecretLiteralVariable::Plaintext",
        "ModuleRole": "Module::Role",
        "ModuleDecryptSecretFunction": "Module::DecryptSecretFunction",
        "ModuleRoleSecretsPolicy": "Module::Role::SecretsPolicy",
        "ModuleRegistration": "Module::Registration"
      },
      "TypeNameMappings": {
        "Custom::ModuleDecryptSecret": "Module::DecryptSecret",
        "Custom::LambdaSharpRegistrationModule": "LambdaSharp::Registration::Module"
      }
    }
  }
}