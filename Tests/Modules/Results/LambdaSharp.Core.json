{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "LambdaSharp Core Resources and Services (v1.0-DEV)",
  "Parameters": {
    "DeadLetterQueue": {
      "Type": "String",
      "Description": "Dead Letter Queue (ARN)"
    },
    "LoggingStream": {
      "Type": "String",
      "Description": "Logging Stream (ARN)"
    },
    "LoggingStreamRetentionPeriodHours": {
      "Type": "Number",
      "Description": "Retention period (hours)",
      "Default": "24",
      "MinValue": 1
    },
    "LoggingStreamShardCount": {
      "Type": "Number",
      "Description": "Number of Kinesis shards",
      "Default": "1",
      "MinValue": 1
    },
    "CoreSecretsKey": {
      "Type": "String",
      "Description": "Encryption Key (ARN)",
      "AllowedPattern": "(arn:aws:kms:.*)?",
      "ConstraintDescription": "Must be a valid KMS Key ARN or left blank"
    },
    "RollbarReadAccessToken": {
      "Type": "String",
      "Description": "Read Access Token",
      "Default": ""
    },
    "RollbarWriteAccessToken": {
      "Type": "String",
      "Description": "Write Access Token",
      "Default": ""
    },
    "RollbarProjectPattern": {
      "Type": "String",
      "Description": "Project Pattern",
      "Default": ""
    },
    "RollbarProjectPrefix": {
      "Type": "String",
      "Description": "Project Prefix",
      "Default": ""
    },
    "ExistingDeploymentBucket": {
      "Type": "String",
      "Description": "ARN of an existing S3 bucket for LambdaSharp deployments (leave blank to create a new S3 bucket)",
      "AllowedPattern": "(arn:aws:s3:.*)?",
      "ConstraintDescription": "Must be a valid S3 ARN (all lowercase) or left blank"
    },
    "Secrets": {
      "Type": "String",
      "Description": "Secret Keys (ARNs)",
      "Default": ""
    },
    "XRayTracing": {
      "Type": "String",
      "Description": "AWS X-Ray Tracing",
      "AllowedValues": [
        "Disabled",
        "RootModule",
        "AllModules"
      ],
      "Default": "Disabled"
    },
    "DeploymentBucketName": {
      "Type": "String",
      "Description": "Deployment S3 Bucket Name"
    },
    "DeploymentPrefix": {
      "Type": "String",
      "Description": "Deployment Tier Prefix"
    },
    "DeploymentPrefixLowercase": {
      "Type": "String",
      "Description": "Deployment Tier Prefix (lowercase)"
    },
    "DeploymentRoot": {
      "Type": "String",
      "Description": "Root Stack Name",
      "Default": ""
    },
    "DeploymentChecksum": {
      "Type": "String",
      "Description": "Deployment Checksum",
      "Default": "85289EB8F5E4D97C29E9BC87891FCE6F"
    }
  },
  "Resources": {
    "DeadLetterQueueResource": {
      "Type": "AWS::SQS::Queue",
      "Condition": "DeadLetterQueueIsBlank",
      "Properties": {}
    },
    "LoggingStreamResource": {
      "Type": "AWS::Kinesis::Stream",
      "Condition": "LoggingStreamIsBlank",
      "Properties": {
        "RetentionPeriodHours": {
          "Ref": "LoggingStreamRetentionPeriodHours"
        },
        "ShardCount": {
          "Ref": "LoggingStreamShardCount"
        }
      }
    },
    "CoreSecretsKeyResource": {
      "Type": "AWS::KMS::Key",
      "Condition": "CoreSecretsKeyIsBlank",
      "Properties": {
        "Description": {
          "Fn::Sub": "LambdaSharp.Core encryption key for ${AWS::StackName}"
        },
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Id": {
            "Fn::Sub": "${AWS::StackName}CoreSecretsKeyPolicy"
          },
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:root"
                }
              },
              "Action": [
                "kms:*"
              ],
              "Resource": "*"
            }
          ]
        }
      }
    },
    "LoggingStreamRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "CloudWatchLogsPrincipal",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Sub": "logs.${AWS::Region}.amazonaws.com"
                }
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Sub": "${AWS::StackName}CloudWatchLogsKinesisPolicy"
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "CloudWatchLogsKinesisPermissions",
                  "Effect": "Allow",
                  "Action": "kinesis:PutRecord",
                  "Resource": {
                    "Fn::If": [
                      "LoggingStreamIsBlank",
                      {
                        "Fn::GetAtt": [
                          "LoggingStreamResource",
                          "Arn"
                        ]
                      },
                      {
                        "Ref": "LoggingStream"
                      }
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "ProcessLogEvents": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "DeploymentBucketName"
          },
          "S3Key": "<%MODULE_ORIGIN%>/LambdaSharp/Core/.artifacts/ProcessLogEvents-DRYRUN.zip"
        },
        "DeadLetterConfig": {
          "TargetArn": {
            "Fn::If": [
              "DeadLetterQueueIsBlank",
              {
                "Fn::GetAtt": [
                  "DeadLetterQueueResource",
                  "Arn"
                ]
              },
              {
                "Ref": "DeadLetterQueue"
              }
            ]
          }
        },
        "Description": "Process log events from all LambdaSharp module functions (v1.0-DEV)",
        "Environment": {
          "Variables": {
            "MODULE_ID": {
              "Ref": "AWS::StackName"
            },
            "MODULE_INFO": "LambdaSharp.Core:1.0-DEV",
            "LAMBDA_NAME": "ProcessLogEvents",
            "LAMBDA_RUNTIME": "dotnetcore2.1",
            "DEPLOYMENTBUCKETNAME": {
              "Ref": "DeploymentBucketName"
            },
            "DEADLETTERQUEUE": {
              "Fn::If": [
                "DeadLetterQueueIsBlank",
                {
                  "Fn::GetAtt": [
                    "DeadLetterQueueResource",
                    "Arn"
                  ]
                },
                {
                  "Ref": "DeadLetterQueue"
                }
              ]
            },
            "STR_CORESECRETSKEY": {
              "Fn::If": [
                "CoreSecretsKeyIsBlank",
                {
                  "Fn::GetAtt": [
                    "CoreSecretsKeyResource",
                    "Arn"
                  ]
                },
                {
                  "Ref": "CoreSecretsKey"
                }
              ]
            },
            "STR_ERRORREPORTTOPIC": {
              "Ref": "ErrorReportTopic"
            },
            "STR_USAGEREPORTTOPIC": {
              "Ref": "UsageReportTopic"
            },
            "STR_REGISTRATIONTABLE": {
              "Fn::GetAtt": [
                "RegistrationTable",
                "Arn"
              ]
            },
            "STR_MODULE_ROLE_SECRETSPOLICY": {
              "Fn::If": [
                "ModuleRoleSecretsPolicyCondition",
                {
                  "Ref": "ModuleRoleSecretsPolicy"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          }
        },
        "Handler": "ProcessLogEvents::LambdaSharp.Core.ProcessLogEvents.Function::FunctionHandlerAsync",
        "MemorySize": "256",
        "Role": {
          "Fn::GetAtt": [
            "ModuleRole",
            "Arn"
          ]
        },
        "Runtime": "dotnetcore2.1",
        "Timeout": "30",
        "TracingConfig": {
          "Mode": {
            "Fn::If": [
              "XRayIsEnabled",
              "Active",
              "PassThrough"
            ]
          }
        }
      }
    },
    "ProcessLogEventsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": "/aws/lambda/${ProcessLogEvents}"
        },
        "RetentionInDays": 30
      }
    },
    "ErrorReportTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {}
    },
    "UsageReportTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {}
    },
    "RegistrationTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          {
            "AttributeName": "Id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "Id",
            "KeyType": "HASH"
          }
        ]
      }
    },
    "RegistrationFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "DeploymentBucketName"
          },
          "S3Key": "<%MODULE_ORIGIN%>/LambdaSharp/Core/.artifacts/RegistrationFunction-DRYRUN.zip"
        },
        "DeadLetterConfig": {
          "TargetArn": {
            "Fn::If": [
              "DeadLetterQueueIsBlank",
              {
                "Fn::GetAtt": [
                  "DeadLetterQueueResource",
                  "Arn"
                ]
              },
              {
                "Ref": "DeadLetterQueue"
              }
            ]
          }
        },
        "Description": "Register LambdaSharp modules and functions (v1.0-DEV)",
        "Environment": {
          "Variables": {
            "MODULE_ID": {
              "Ref": "AWS::StackName"
            },
            "MODULE_INFO": "LambdaSharp.Core:1.0-DEV",
            "LAMBDA_NAME": "RegistrationFunction",
            "LAMBDA_RUNTIME": "dotnetcore2.1",
            "DEPLOYMENTBUCKETNAME": {
              "Ref": "DeploymentBucketName"
            },
            "DEADLETTERQUEUE": {
              "Fn::If": [
                "DeadLetterQueueIsBlank",
                {
                  "Fn::GetAtt": [
                    "DeadLetterQueueResource",
                    "Arn"
                  ]
                },
                {
                  "Ref": "DeadLetterQueue"
                }
              ]
            },
            "STR_CORESECRETSKEY": {
              "Fn::If": [
                "CoreSecretsKeyIsBlank",
                {
                  "Fn::GetAtt": [
                    "CoreSecretsKeyResource",
                    "Arn"
                  ]
                },
                {
                  "Ref": "CoreSecretsKey"
                }
              ]
            },
            "SEC_ROLLBARREADACCESSTOKEN": {
              "Ref": "RollbarReadAccessToken"
            },
            "SEC_ROLLBARWRITEACCESSTOKEN": {
              "Ref": "RollbarWriteAccessToken"
            },
            "STR_ROLLBARPROJECTPATTERN": {
              "Ref": "RollbarProjectPattern"
            },
            "STR_ROLLBARPROJECTPREFIX": {
              "Ref": "RollbarProjectPrefix"
            },
            "STR_REGISTRATIONTABLE": {
              "Fn::GetAtt": [
                "RegistrationTable",
                "Arn"
              ]
            },
            "STR_MODULE_ROLE_SECRETSPOLICY": {
              "Fn::If": [
                "ModuleRoleSecretsPolicyCondition",
                {
                  "Ref": "ModuleRoleSecretsPolicy"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          }
        },
        "Handler": "RegistrationFunction::LambdaSharp.Core.RegistrationFunction.Function::FunctionHandlerAsync",
        "MemorySize": "256",
        "Role": {
          "Fn::GetAtt": [
            "ModuleRole",
            "Arn"
          ]
        },
        "Runtime": "dotnetcore2.1",
        "Timeout": "30",
        "TracingConfig": {
          "Mode": {
            "Fn::If": [
              "XRayIsEnabled",
              "Active",
              "PassThrough"
            ]
          }
        }
      }
    },
    "RegistrationFunctionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": "/aws/lambda/${RegistrationFunction}"
        },
        "RetentionInDays": 30
      }
    },
    "DeploymentBucketResource": {
      "Type": "AWS::S3::Bucket",
      "Condition": "CreateDeploymentBucket",
      "Properties": {}
    },
    "DeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Condition": "CreateDeploymentBucket",
      "Properties": {
        "Bucket": {
          "Ref": "DeploymentBucketResource"
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "serverlessrepo.amazonaws.com"
              },
              "Action": "s3:GetObject",
              "Resource": {
                "Fn::Sub": "${DeploymentBucketResource.Arn}/*"
              }
            }
          ]
        }
      }
    },
    "ModuleRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "ModuleLambdaPrincipal",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "LoggingStreamResource",
                  "Effect": "Allow",
                  "Action": [
                    "kinesis:DescribeStream",
                    "kinesis:GetRecords",
                    "kinesis:GetShardIterator"
                  ],
                  "Resource": {
                    "Fn::If": [
                      "LoggingStreamIsBlank",
                      {
                        "Fn::GetAtt": [
                          "LoggingStreamResource",
                          "Arn"
                        ]
                      },
                      {
                        "Ref": "LoggingStream"
                      }
                    ]
                  }
                },
                {
                  "Sid": "CoreSecretsKeyResource",
                  "Effect": "Allow",
                  "Action": [
                    "kms:Decrypt",
                    "kms:Encrypt"
                  ],
                  "Resource": {
                    "Fn::If": [
                      "CoreSecretsKeyIsBlank",
                      {
                        "Fn::GetAtt": [
                          "CoreSecretsKeyResource",
                          "Arn"
                        ]
                      },
                      {
                        "Ref": "CoreSecretsKey"
                      }
                    ]
                  }
                },
                {
                  "Sid": "ErrorReportTopic",
                  "Effect": "Allow",
                  "Action": [
                    "sns:Publish"
                  ],
                  "Resource": {
                    "Ref": "ErrorReportTopic"
                  }
                },
                {
                  "Sid": "UsageReportTopic",
                  "Effect": "Allow",
                  "Action": [
                    "sns:Publish"
                  ],
                  "Resource": {
                    "Ref": "UsageReportTopic"
                  }
                },
                {
                  "Sid": "RegistrationTable",
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:BatchGetItem",
                    "dynamodb:BatchWriteItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:DescribeStream",
                    "dynamodb:DescribeTable",
                    "dynamodb:GetItem",
                    "dynamodb:GetRecords",
                    "dynamodb:GetShardIterator",
                    "dynamodb:PutItem",
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:UpdateItem"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "RegistrationTable",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Join": [
                        "/",
                        [
                          {
                            "Fn::GetAtt": [
                              "RegistrationTable",
                              "Arn"
                            ]
                          },
                          "stream/*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "/",
                        [
                          {
                            "Fn::GetAtt": [
                              "RegistrationTable",
                              "Arn"
                            ]
                          },
                          "index/*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Sid": "DeploymentBucket",
                  "Effect": "Allow",
                  "Action": [
                    "s3:AbortMultipartUpload",
                    "s3:CreateBucket",
                    "s3:DeleteObject",
                    "s3:DeleteObjectTagging",
                    "s3:DeleteObjectVersion",
                    "s3:DeleteObjectVersionTagging",
                    "s3:GetBucketLocation",
                    "s3:GetObject",
                    "s3:GetObjectAcl",
                    "s3:GetObjectTagging",
                    "s3:GetObjectTorrent",
                    "s3:GetObjectVersion",
                    "s3:GetObjectVersionAcl",
                    "s3:GetObjectVersionTagging",
                    "s3:GetObjectVersionTorrent",
                    "s3:ListBucket",
                    "s3:ListBucketMultipartUploads",
                    "s3:ListMultipartUploadParts",
                    "s3:PutObject",
                    "s3:PutObjectAcl",
                    "s3:PutObjectTagging",
                    "s3:PutObjectVersionAcl",
                    "s3:PutObjectVersionTagging",
                    "s3:RestoreObject"
                  ],
                  "Resource": [
                    {
                      "Fn::If": [
                        "CreateDeploymentBucket",
                        {
                          "Fn::GetAtt": [
                            "DeploymentBucketResource",
                            "Arn"
                          ]
                        },
                        {
                          "Ref": "ExistingDeploymentBucket"
                        }
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Fn::If": [
                              "CreateDeploymentBucket",
                              {
                                "Fn::GetAtt": [
                                  "DeploymentBucketResource",
                                  "Arn"
                                ]
                              },
                              {
                                "Ref": "ExistingDeploymentBucket"
                              }
                            ]
                          },
                          "/*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Sid": "DeadLetterQueue",
                  "Effect": "Allow",
                  "Action": [
                    "sqs:SendMessage"
                  ],
                  "Resource": {
                    "Fn::If": [
                      "DeadLetterQueueIsBlank",
                      {
                        "Fn::GetAtt": [
                          "DeadLetterQueueResource",
                          "Arn"
                        ]
                      },
                      {
                        "Ref": "DeadLetterQueue"
                      }
                    ]
                  }
                },
                {
                  "Sid": "LogStream",
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Sid": "CloudFormation",
                  "Effect": "Allow",
                  "Action": [
                    "cloudformation:DescribeStacks"
                  ],
                  "Resource": {
                    "Ref": "AWS::StackId"
                  }
                },
                {
                  "Sid": "AWSXRay",
                  "Effect": "Allow",
                  "Action": [
                    "xray:GetSamplingRules",
                    "xray:GetSamplingStatisticSummaries",
                    "xray:GetSamplingTargets",
                    "xray:PutTelemetryRecords",
                    "xray:PutTraceSegments"
                  ],
                  "Resource": "*"
                },
                {
                  "Sid": "DeploymentBucketReadOnly",
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:aws:s3:::${DeploymentBucketName}/<%MODULE_ORIGIN%>/LambdaSharp/Core/.artifacts/*"
                  }
                }
              ]
            },
            "PolicyName": {
              "Fn::Sub": "${AWS::StackName}ModulePolicy"
            }
          }
        ]
      }
    },
    "ModuleRoleSecretsPolicy": {
      "Type": "AWS::IAM::Policy",
      "Condition": "ModuleRoleSecretsPolicyCondition",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "Secrets",
              "Effect": "Allow",
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt"
              ],
              "Resource": {
                "Fn::Split": [
                  ",",
                  {
                    "Ref": "Secrets"
                  }
                ]
              }
            }
          ]
        },
        "PolicyName": {
          "Fn::Sub": "${AWS::StackName}ModuleRoleSecrets"
        },
        "Roles": [
          {
            "Ref": "ModuleRole"
          }
        ]
      }
    },
    "ProcessLogEventsSource1EventMapping": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "Properties": {
        "BatchSize": 100,
        "Enabled": true,
        "EventSourceArn": {
          "Fn::If": [
            "LoggingStreamIsBlank",
            {
              "Fn::GetAtt": [
                "LoggingStreamResource",
                "Arn"
              ]
            },
            {
              "Ref": "LoggingStream"
            }
          ]
        },
        "FunctionName": {
          "Ref": "ProcessLogEvents"
        },
        "StartingPosition": "LATEST"
      }
    }
  },
  "Outputs": {
    "DeadLetterQueue": {
      "Value": {
        "Fn::If": [
          "DeadLetterQueueIsBlank",
          {
            "Fn::GetAtt": [
              "DeadLetterQueueResource",
              "Arn"
            ]
          },
          {
            "Ref": "DeadLetterQueue"
          }
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}::DeadLetterQueue"
        }
      },
      "Description": "Dead Letter Queue (ARN)"
    },
    "LoggingStream": {
      "Value": {
        "Fn::If": [
          "LoggingStreamIsBlank",
          {
            "Fn::GetAtt": [
              "LoggingStreamResource",
              "Arn"
            ]
          },
          {
            "Ref": "LoggingStream"
          }
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}::LoggingStream"
        }
      },
      "Description": "Logging Stream (ARN)"
    },
    "LoggingStreamRole": {
      "Value": {
        "Fn::GetAtt": [
          "LoggingStreamRole",
          "Arn"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}::LoggingStreamRole"
        }
      },
      "Description": "CloudWatch Logs Role for writing to logging stream (ARN)"
    },
    "LambdaSharpRegistrationModule": {
      "Value": {
        "Fn::GetAtt": [
          "RegistrationFunction",
          "Arn"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${DeploymentPrefix}LambdaSharp::Registration::Module"
        }
      },
      "Description": "Custom resource type for module registrations"
    },
    "LambdaSharpRegistrationFunction": {
      "Value": {
        "Fn::GetAtt": [
          "RegistrationFunction",
          "Arn"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${DeploymentPrefix}LambdaSharp::Registration::Function"
        }
      },
      "Description": "Custom resource type for function registrations"
    },
    "CoreServices": {
      "Value": "Enabled",
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}::CoreServices"
        }
      },
      "Description": "Flag indicating if operating services are deployed (String)"
    },
    "DeploymentBucket": {
      "Value": {
        "Fn::If": [
          "CreateDeploymentBucket",
          {
            "Fn::GetAtt": [
              "DeploymentBucketResource",
              "Arn"
            ]
          },
          {
            "Ref": "ExistingDeploymentBucket"
          }
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}::DeploymentBucket"
        }
      },
      "Description": "S3 bucket for published modules (ARN)"
    },
    "Module": {
      "Value": "LambdaSharp.Core:1.0-DEV@<%MODULE_ORIGIN%>"
    },
    "ModuleChecksum": {
      "Value": "85289EB8F5E4D97C29E9BC87891FCE6F"
    },
    "LambdaSharpTool": {
      "Value": "0.7.0.8"
    },
    "LambdaSharpTier": {
      "Value": {
        "Fn::Select": [
          "0",
          {
            "Fn::Split": [
              "-",
              {
                "Ref": "DeploymentPrefix"
              }
            ]
          }
        ]
      }
    }
  },
  "Conditions": {
    "DeadLetterQueueIsBlank": {
      "Fn::Equals": [
        {
          "Ref": "DeadLetterQueue"
        },
        ""
      ]
    },
    "LoggingStreamIsBlank": {
      "Fn::Equals": [
        {
          "Ref": "LoggingStream"
        },
        ""
      ]
    },
    "CoreSecretsKeyIsBlank": {
      "Fn::Equals": [
        {
          "Ref": "CoreSecretsKey"
        },
        ""
      ]
    },
    "CreateDeploymentBucket": {
      "Fn::Equals": [
        {
          "Ref": "ExistingDeploymentBucket"
        },
        ""
      ]
    },
    "XRayIsEnabled": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "XRayTracing"
            },
            "Disabled"
          ]
        }
      ]
    },
    "ModuleRoleSecretsPolicyCondition": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "Secrets"
            },
            ""
          ]
        }
      ]
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterLabels": {
        "DeadLetterQueue": {
          "default": "Dead letter queue for functions (leave blank to create a new queue) [AWS::SQS::Queue]"
        },
        "LoggingStream": {
          "default": "Logging Kinesis stream for functions (leave blank to create a new stream) [AWS::Kinesis::Stream]"
        },
        "LoggingStreamRetentionPeriodHours": {
          "default": "Size of the Logging stream buffer (in hours) [Number]"
        },
        "LoggingStreamShardCount": {
          "default": "Number of Kinesis shards for the logging streams [Number]"
        },
        "CoreSecretsKey": {
          "default": "KMS key used by LambdaSharp.Core to encrypt sensitive information (leave blank to create a new key) [AWS::KMS::Key]"
        },
        "RollbarReadAccessToken": {
          "default": "Account-level token for read operations (leave blank to disable Rollbar integration) [Secret]"
        },
        "RollbarWriteAccessToken": {
          "default": "Account-level token for write operations (leave blank to disable Rollbar integration) [Secret]"
        },
        "RollbarProjectPattern": {
          "default": "Optional pattern for naming Rollbar projects (e.g. \"Lambda-{ModuleFullName}\") [String]"
        },
        "RollbarProjectPrefix": {
          "default": "(Obsolete: use \"RollbarProjectPattern\" instead) Optional prefix when creating Rollbar projects (e.g. \"Lambda-\") [String]"
        },
        "ExistingDeploymentBucket": {
          "default": "ARN of an existing S3 bucket for LambdaSharp deployments (leave blank to create a new S3 bucket) [String]"
        },
        "Secrets": {
          "default": "Comma-separated list of additional KMS secret keys [String]"
        },
        "XRayTracing": {
          "default": "Enable AWS X-Ray tracing mode for module resources [String]"
        },
        "DeploymentBucketName": {
          "default": "Deployment S3 bucket name [String]"
        },
        "DeploymentPrefix": {
          "default": "Deployment tier prefix [String]"
        },
        "DeploymentPrefixLowercase": {
          "default": "Deployment tier prefix (lowercase) [String]"
        },
        "DeploymentRoot": {
          "default": "Root stack name for nested deployments, blank otherwise [String]"
        },
        "DeploymentChecksum": {
          "default": "CloudFormation template MD5 checksum [String]"
        }
      },
      "ParameterGroups": [
        {
          "Label": {
            "default": "LambdaSharp Tier Settings"
          },
          "Parameters": [
            "DeadLetterQueue",
            "LoggingStream",
            "LoggingStreamRetentionPeriodHours",
            "LoggingStreamShardCount",
            "CoreSecretsKey"
          ]
        },
        {
          "Label": {
            "default": "Rollbar Settings"
          },
          "Parameters": [
            "RollbarReadAccessToken",
            "RollbarWriteAccessToken",
            "RollbarProjectPattern",
            "RollbarProjectPrefix"
          ]
        },
        {
          "Label": {
            "default": "LambdaSharp Deployment Settings"
          },
          "Parameters": [
            "ExistingDeploymentBucket"
          ]
        },
        {
          "Label": {
            "default": "LambdaSharp Module Options"
          },
          "Parameters": [
            "Secrets",
            "XRayTracing"
          ]
        },
        {
          "Label": {
            "default": "LambdaSharp Deployment Settings (DO NOT MODIFY)"
          },
          "Parameters": [
            "DeploymentBucketName",
            "DeploymentPrefix",
            "DeploymentPrefixLowercase",
            "DeploymentRoot",
            "DeploymentChecksum"
          ]
        }
      ]
    },
    "LambdaSharp::Manifest": {
      "Version": "2019-07-04",
      "Module": "LambdaSharp.Core:1.0-DEV",
      "Description": "LambdaSharp Core Resources and Services",
      "TemplateChecksum": "85289EB8F5E4D97C29E9BC87891FCE6F",
      "Date": "2019-08-09T15:00:00Z",
      "CoreServicesVersion": "0.7.0",
      "ParameterSections": [
        {
          "Title": "LambdaSharp Tier Settings",
          "Parameters": [
            {
              "Name": "DeadLetterQueue",
              "Type": "AWS::SQS::Queue",
              "Label": "Dead letter queue for functions (leave blank to create a new queue)"
            },
            {
              "Name": "LoggingStream",
              "Type": "AWS::Kinesis::Stream",
              "Label": "Logging Kinesis stream for functions (leave blank to create a new stream)"
            },
            {
              "Name": "LoggingStreamRetentionPeriodHours",
              "Type": "Number",
              "Label": "Size of the Logging stream buffer (in hours)",
              "Default": "24"
            },
            {
              "Name": "LoggingStreamShardCount",
              "Type": "Number",
              "Label": "Number of Kinesis shards for the logging streams",
              "Default": "1"
            },
            {
              "Name": "CoreSecretsKey",
              "Type": "AWS::KMS::Key",
              "Label": "KMS key used by LambdaSharp.Core to encrypt sensitive information (leave blank to create a new key)",
              "AllowedPattern": "(arn:aws:kms:.*)?",
              "ConstraintDescription": "Must be a valid KMS Key ARN or left blank"
            }
          ]
        },
        {
          "Title": "Rollbar Settings",
          "Parameters": [
            {
              "Name": "RollbarReadAccessToken",
              "Type": "Secret",
              "Label": "Account-level token for read operations (leave blank to disable Rollbar integration)",
              "Default": ""
            },
            {
              "Name": "RollbarWriteAccessToken",
              "Type": "Secret",
              "Label": "Account-level token for write operations (leave blank to disable Rollbar integration)",
              "Default": ""
            },
            {
              "Name": "RollbarProjectPattern",
              "Type": "String",
              "Label": "Optional pattern for naming Rollbar projects (e.g. \"Lambda-{ModuleFullName}\")",
              "Default": ""
            },
            {
              "Name": "RollbarProjectPrefix",
              "Type": "String",
              "Label": "(Obsolete: use \"RollbarProjectPattern\" instead) Optional prefix when creating Rollbar projects (e.g. \"Lambda-\")",
              "Default": ""
            }
          ]
        },
        {
          "Title": "LambdaSharp Deployment Settings",
          "Parameters": [
            {
              "Name": "ExistingDeploymentBucket",
              "Type": "String",
              "Label": "ARN of an existing S3 bucket for LambdaSharp deployments (leave blank to create a new S3 bucket)",
              "AllowedPattern": "(arn:aws:s3:.*)?",
              "ConstraintDescription": "Must be a valid S3 ARN (all lowercase) or left blank"
            }
          ]
        },
        {
          "Title": "LambdaSharp Module Options",
          "Parameters": [
            {
              "Name": "Secrets",
              "Type": "String",
              "Label": "Comma-separated list of additional KMS secret keys",
              "Default": ""
            },
            {
              "Name": "XRayTracing",
              "Type": "String",
              "Label": "Enable AWS X-Ray tracing mode for module resources",
              "Default": "Disabled",
              "AllowedValues": [
                "Disabled",
                "RootModule",
                "AllModules"
              ]
            }
          ]
        }
      ],
      "Git": {
        "Branch": "test-branch",
        "SHA": "0123456789ABCDEF0123456789ABCDEF01234567"
      },
      "Artifacts": [],
      "Dependencies": [],
      "ResourceTypes": [
        {
          "Type": "LambdaSharp::Registration::Function",
          "Description": "Custom resource type for function registrations",
          "Properties": [
            {
              "Name": "ModuleId",
              "Description": "Module CloudFormation stack name",
              "Type": "String",
              "Required": true
            },
            {
              "Name": "FunctionId",
              "Description": "Module function ARN",
              "Type": "String",
              "Required": true
            },
            {
              "Name": "FunctionName",
              "Description": "Module function name",
              "Type": "String",
              "Required": true
            },
            {
              "Name": "FunctionLogGroupName",
              "Description": "Module function CloudWatch log group name",
              "Type": "String",
              "Required": true
            },
            {
              "Name": "FunctionMaxMemory",
              "Description": "Max memory for module function",
              "Type": "Number",
              "Required": true
            },
            {
              "Name": "FunctionMaxDuration",
              "Description": "Max duration for module function",
              "Type": "Number",
              "Required": true
            },
            {
              "Name": "FunctionPlatform",
              "Description": "Module function execution platform",
              "Type": "String",
              "Required": true
            },
            {
              "Name": "FunctionFramework",
              "Description": "Module function execution framework",
              "Type": "String",
              "Required": true
            },
            {
              "Name": "FunctionLanguage",
              "Description": "Module function programming language",
              "Type": "String",
              "Required": true
            }
          ],
          "Attributes": [
            {
              "Name": "Registration",
              "Description": "Registration ID",
              "Type": "String",
              "Required": true
            }
          ]
        },
        {
          "Type": "LambdaSharp::Registration::Module",
          "Description": "Custom resource type for module registrations",
          "Properties": [
            {
              "Name": "ModuleId",
              "Description": "Module CloudFormation stack name",
              "Type": "String",
              "Required": true
            },
            {
              "Name": "Module",
              "Description": "Module full name and version",
              "Type": "String",
              "Required": true
            }
          ],
          "Attributes": [
            {
              "Name": "Registration",
              "Description": "Registration ID",
              "Type": "String",
              "Required": true
            }
          ]
        }
      ],
      "Outputs": [
        {
          "Name": "CoreServices",
          "Description": "Flag indicating if operating services are deployed (String)",
          "Type": "String"
        },
        {
          "Name": "DeadLetterQueue",
          "Description": "Dead Letter Queue (ARN)",
          "Type": "AWS::SQS::Queue"
        },
        {
          "Name": "DeploymentBucket",
          "Description": "S3 bucket for published modules (ARN)",
          "Type": "AWS::S3::Bucket"
        },
        {
          "Name": "LoggingStream",
          "Description": "Logging Stream (ARN)",
          "Type": "AWS::Kinesis::Stream"
        },
        {
          "Name": "LoggingStreamRole",
          "Description": "CloudWatch Logs Role for writing to logging stream (ARN)",
          "Type": "AWS::IAM::Role"
        }
      ]
    },
    "LambdaSharp::NameMappings": {
      "Version": "2019-07-04",
      "ResourceNameMappings": {
        "DeadLetterQueueResource": "DeadLetterQueue::Resource",
        "LoggingStreamResource": "LoggingStream::Resource",
        "CoreSecretsKeyResource": "CoreSecretsKey::Resource",
        "ProcessLogEventsLogGroup": "ProcessLogEvents::LogGroup",
        "RegistrationFunctionLogGroup": "RegistrationFunction::LogGroup",
        "ModuleRole": "Module::Role",
        "ModuleRoleSecretsPolicy": "Module::Role::SecretsPolicy",
        "ProcessLogEventsSource1EventMapping": "ProcessLogEvents::Source1EventMapping"
      },
      "TypeNameMappings": {}
    }
  }
}