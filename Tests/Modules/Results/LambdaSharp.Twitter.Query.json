{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Search Twitter at regular intervals and publish new found tweets (v1.0-DEV)",
  "Parameters": {
    "TwitterApiKey": {
      "Type": "String",
      "Description": "This parameter sets the API key for accessing Twitter"
    },
    "TwitterApiSecretKey": {
      "Type": "String",
      "Description": "This parameter sets the secret API key for accessing Twitter"
    },
    "TwitterQuery": {
      "Type": "String",
      "Description": "This parameter sets the query expression for finding tweets",
      "AllowedPattern": ".+",
      "ConstraintDescription": "Search query must be a non-empty string"
    },
    "TwitterQueryInterval": {
      "Type": "Number",
      "Description": "This parameter sets the interval between queries (in minutes)",
      "Default": "60",
      "MinValue": 2,
      "MaxValue": 1440
    },
    "TwitterLanguageFilter": {
      "Type": "String",
      "Description": "This parameter is a comma-delimited list of ISO 639-1 language filters for tweets (empty value disables filter)"
    },
    "TwitterSentimentFilter": {
      "Type": "String",
      "Description": "This parameter sets the sentiment filter (one of: SKIP, POSITIVE, NEUTRAL, NEGATIVE, MIXED, ALL)",
      "AllowedValues": [
        "SKIP",
        "POSITIVE",
        "NEUTRAL",
        "NEGATIVE",
        "MIXED",
        "ALL"
      ],
      "Default": "SKIP"
    },
    "Secrets": {
      "Type": "String",
      "Description": "Secret Keys (ARNs)",
      "Default": ""
    },
    "EnableXRayTracing": {
      "Type": "String",
      "Description": "AWS X-Ray Tracing",
      "AllowedValues": [
        "Disabled",
        "RootModule",
        "AllModules"
      ],
      "Default": "Disabled"
    },
    "LambdaSharpCoreDeadLetterQueue": {
      "Type": "String",
      "Description": "Cross-module reference for LambdaSharp.Core::DeadLetterQueue",
      "AllowedPattern": "^.+$",
      "ConstraintDescription": "must either be a cross-module reference or a non-empty value",
      "Default": "$LambdaSharp-Core::DeadLetterQueue"
    },
    "LambdaSharpCoreLoggingStream": {
      "Type": "String",
      "Description": "Cross-module reference for LambdaSharp.Core::LoggingStream",
      "AllowedPattern": "^.+$",
      "ConstraintDescription": "must either be a cross-module reference or a non-empty value",
      "Default": "$LambdaSharp-Core::LoggingStream"
    },
    "LambdaSharpCoreLoggingStreamRole": {
      "Type": "String",
      "Description": "Cross-module reference for LambdaSharp.Core::LoggingStreamRole",
      "AllowedPattern": "^.+$",
      "ConstraintDescription": "must either be a cross-module reference or a non-empty value",
      "Default": "$LambdaSharp-Core::LoggingStreamRole"
    },
    "LambdaSharpCoreDefaultSecretKey": {
      "Type": "String",
      "Description": "Cross-module reference for LambdaSharp.Core::DefaultSecretKey",
      "AllowedPattern": "^.+$",
      "ConstraintDescription": "must either be a cross-module reference or a non-empty value",
      "Default": "$LambdaSharp-Core::DefaultSecretKey"
    },
    "DeploymentBucketName": {
      "Type": "String",
      "Description": "Deployment S3 Bucket Name"
    },
    "DeploymentPrefix": {
      "Type": "String",
      "Description": "Deployment Tier Prefix"
    },
    "DeploymentPrefixLowercase": {
      "Type": "String",
      "Description": "Deployment Tier Prefix (lowercase)"
    },
    "DeploymentRoot": {
      "Type": "String",
      "Description": "Root Stack Name",
      "Default": ""
    },
    "DeploymentChecksum": {
      "Type": "String",
      "Description": "Deployment Checksum",
      "Default": "AFE670647E06008F72CEFA6974CAFE7A"
    }
  },
  "Resources": {
    "TweetTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {}
    },
    "Table": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          {
            "AttributeName": "Id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "Id",
            "KeyType": "HASH"
          }
        ]
      }
    },
    "QueryFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "DeploymentBucketName"
          },
          "S3Key": "LambdaSharp/Modules/Twitter.Query/Assets/QueryFunction-DRYRUN.zip"
        },
        "DeadLetterConfig": {
          "TargetArn": {
            "Fn::If": [
              "LambdaSharpCoreDeadLetterQueueIsImported",
              {
                "Fn::ImportValue": {
                  "Fn::Sub": [
                    "${DeploymentPrefix}${Import}",
                    {
                      "Import": {
                        "Fn::Select": [
                          "1",
                          {
                            "Fn::Split": [
                              "$",
                              {
                                "Ref": "LambdaSharpCoreDeadLetterQueue"
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "Ref": "LambdaSharpCoreDeadLetterQueue"
              }
            ]
          }
        },
        "Description": "This function runs on a scheduled interval to find the latest matching tweets (v1.0-DEV)",
        "Environment": {
          "Variables": {
            "MODULE_ID": {
              "Ref": "AWS::StackName"
            },
            "MODULE_INFO": "LambdaSharp.Twitter.Query:1.0-DEV",
            "LAMBDA_NAME": "QueryFunction",
            "LAMBDA_RUNTIME": "dotnetcore2.1",
            "DEADLETTERQUEUE": {
              "Fn::If": [
                "LambdaSharpCoreDeadLetterQueueIsImported",
                {
                  "Fn::ImportValue": {
                    "Fn::Sub": [
                      "${DeploymentPrefix}${Import}",
                      {
                        "Import": {
                          "Fn::Select": [
                            "1",
                            {
                              "Fn::Split": [
                                "$",
                                {
                                  "Ref": "LambdaSharpCoreDeadLetterQueue"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "Ref": "LambdaSharpCoreDeadLetterQueue"
                }
              ]
            },
            "DEFAULTSECRETKEY": {
              "Fn::If": [
                "LambdaSharpCoreDefaultSecretKeyIsImported",
                {
                  "Fn::ImportValue": {
                    "Fn::Sub": [
                      "${DeploymentPrefix}${Import}",
                      {
                        "Import": {
                          "Fn::Select": [
                            "1",
                            {
                              "Fn::Split": [
                                "$",
                                {
                                  "Ref": "LambdaSharpCoreDefaultSecretKey"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "Ref": "LambdaSharpCoreDefaultSecretKey"
                }
              ]
            },
            "SEC_TWITTERAPIKEY": {
              "Ref": "TwitterApiKey"
            },
            "SEC_TWITTERAPISECRETKEY": {
              "Ref": "TwitterApiSecretKey"
            },
            "STR_TWITTERQUERY": {
              "Ref": "TwitterQuery"
            },
            "STR_TWITTERLANGUAGEFILTER": {
              "Ref": "TwitterLanguageFilter"
            },
            "STR_TWITTERSENTIMENTFILTER": {
              "Ref": "TwitterSentimentFilter"
            },
            "STR_TWEETTOPIC": {
              "Ref": "TweetTopic"
            },
            "STR_TABLE": {
              "Fn::GetAtt": [
                "Table",
                "Arn"
              ]
            }
          }
        },
        "Handler": "QueryFunction::LambdaSharp.Twitter.QueryFunction.Function::FunctionHandlerAsync",
        "MemorySize": "256",
        "Role": {
          "Fn::GetAtt": [
            "ModuleRole",
            "Arn"
          ]
        },
        "Runtime": "dotnetcore2.1",
        "Timeout": "30",
        "TracingConfig": {
          "Mode": {
            "Fn::If": [
              "XRayIsEnabled",
              "Active",
              "PassThrough"
            ]
          }
        }
      }
    },
    "QueryFunctionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": "/aws/lambda/${QueryFunction}"
        },
        "RetentionInDays": 30
      }
    },
    "ModuleRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "ModuleLambdaPrincipal",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "TweetTopic",
                  "Effect": "Allow",
                  "Action": [
                    "sns:Publish"
                  ],
                  "Resource": {
                    "Ref": "TweetTopic"
                  }
                },
                {
                  "Sid": "Table",
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:BatchGetItem",
                    "dynamodb:BatchWriteItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:DescribeStream",
                    "dynamodb:DescribeTable",
                    "dynamodb:GetItem",
                    "dynamodb:GetRecords",
                    "dynamodb:GetShardIterator",
                    "dynamodb:PutItem",
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:UpdateItem"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "Table",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Join": [
                        "/",
                        [
                          {
                            "Fn::GetAtt": [
                              "Table",
                              "Arn"
                            ]
                          },
                          "stream/*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "/",
                        [
                          {
                            "Fn::GetAtt": [
                              "Table",
                              "Arn"
                            ]
                          },
                          "index/*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Sid": "AwsComprehendPermissions",
                  "Effect": "Allow",
                  "Action": [
                    "comprehend:BatchDetectSentiment"
                  ],
                  "Resource": "*"
                },
                {
                  "Sid": "ModuleDeadLetterQueueLogging",
                  "Effect": "Allow",
                  "Action": [
                    "sqs:SendMessage"
                  ],
                  "Resource": {
                    "Fn::If": [
                      "LambdaSharpCoreDeadLetterQueueIsImported",
                      {
                        "Fn::ImportValue": {
                          "Fn::Sub": [
                            "${DeploymentPrefix}${Import}",
                            {
                              "Import": {
                                "Fn::Select": [
                                  "1",
                                  {
                                    "Fn::Split": [
                                      "$",
                                      {
                                        "Ref": "LambdaSharpCoreDeadLetterQueue"
                                      }
                                    ]
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "Ref": "LambdaSharpCoreDeadLetterQueue"
                      }
                    ]
                  }
                },
                {
                  "Sid": "SecretsDecryption",
                  "Effect": "Allow",
                  "Action": [
                    "kms:Decrypt",
                    "kms:Encrypt",
                    "kms:GenerateDataKey",
                    "kms:GenerateDataKeyWithoutPlaintext"
                  ],
                  "Resource": {
                    "Fn::Split": [
                      ",",
                      {
                        "Fn::If": [
                          "SecretsIsEmpty",
                          {
                            "Fn::If": [
                              "LambdaSharpCoreDefaultSecretKeyIsImported",
                              {
                                "Fn::ImportValue": {
                                  "Fn::Sub": [
                                    "${DeploymentPrefix}${Import}",
                                    {
                                      "Import": {
                                        "Fn::Select": [
                                          "1",
                                          {
                                            "Fn::Split": [
                                              "$",
                                              {
                                                "Ref": "LambdaSharpCoreDefaultSecretKey"
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "Ref": "LambdaSharpCoreDefaultSecretKey"
                              }
                            ]
                          },
                          {
                            "Fn::Join": [
                              ",",
                              [
                                {
                                  "Fn::If": [
                                    "LambdaSharpCoreDefaultSecretKeyIsImported",
                                    {
                                      "Fn::ImportValue": {
                                        "Fn::Sub": [
                                          "${DeploymentPrefix}${Import}",
                                          {
                                            "Import": {
                                              "Fn::Select": [
                                                "1",
                                                {
                                                  "Fn::Split": [
                                                    "$",
                                                    {
                                                      "Ref": "LambdaSharpCoreDefaultSecretKey"
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "Ref": "LambdaSharpCoreDefaultSecretKey"
                                    }
                                  ]
                                },
                                {
                                  "Ref": "Secrets"
                                }
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "Sid": "ModuleLogStreamAccess",
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Sid": "AWSXRayWriteAccess",
                  "Effect": "Allow",
                  "Action": [
                    "xray:GetSamplingRules",
                    "xray:GetSamplingStatisticSummaries",
                    "xray:GetSamplingTargets",
                    "xray:PutTelemetryRecords",
                    "xray:PutTraceSegments"
                  ],
                  "Resource": "*"
                }
              ]
            },
            "PolicyName": {
              "Fn::Sub": "${AWS::StackName}ModulePolicy"
            }
          }
        ]
      }
    },
    "ModuleRegistration": {
      "Type": "Custom::LambdaSharpRegistrationModule",
      "Properties": {
        "ServiceToken": {
          "Fn::ImportValue": {
            "Fn::Sub": "${DeploymentPrefix}LambdaSharp::Registration::Module"
          }
        },
        "ResourceType": "LambdaSharp::Registration::Module",
        "Module": "LambdaSharp.Twitter.Query:1.0-DEV",
        "ModuleId": {
          "Ref": "AWS::StackName"
        }
      }
    },
    "QueryFunctionRegistration": {
      "Type": "Custom::LambdaSharpRegistrationFunction",
      "Properties": {
        "ServiceToken": {
          "Fn::ImportValue": {
            "Fn::Sub": "${DeploymentPrefix}LambdaSharp::Registration::Function"
          }
        },
        "ResourceType": "LambdaSharp::Registration::Function",
        "ModuleId": {
          "Ref": "AWS::StackName"
        },
        "FunctionId": {
          "Ref": "QueryFunction"
        },
        "FunctionName": "QueryFunction",
        "FunctionLogGroupName": {
          "Fn::Sub": "/aws/lambda/${QueryFunction}"
        },
        "FunctionPlatform": "AWS Lambda",
        "FunctionFramework": "dotnetcore2.1",
        "FunctionLanguage": "csharp",
        "FunctionMaxMemory": "256",
        "FunctionMaxDuration": "30"
      },
      "DependsOn": [
        "ModuleRegistration"
      ]
    },
    "QueryFunctionLogGroupSubscription": {
      "Type": "AWS::Logs::SubscriptionFilter",
      "Properties": {
        "DestinationArn": {
          "Fn::If": [
            "LambdaSharpCoreLoggingStreamIsImported",
            {
              "Fn::ImportValue": {
                "Fn::Sub": [
                  "${DeploymentPrefix}${Import}",
                  {
                    "Import": {
                      "Fn::Select": [
                        "1",
                        {
                          "Fn::Split": [
                            "$",
                            {
                              "Ref": "LambdaSharpCoreLoggingStream"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "Ref": "LambdaSharpCoreLoggingStream"
            }
          ]
        },
        "FilterPattern": "-\"*** \"",
        "LogGroupName": {
          "Ref": "QueryFunctionLogGroup"
        },
        "RoleArn": {
          "Fn::If": [
            "LambdaSharpCoreLoggingStreamRoleIsImported",
            {
              "Fn::ImportValue": {
                "Fn::Sub": [
                  "${DeploymentPrefix}${Import}",
                  {
                    "Import": {
                      "Fn::Select": [
                        "1",
                        {
                          "Fn::Split": [
                            "$",
                            {
                              "Ref": "LambdaSharpCoreLoggingStreamRole"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "Ref": "LambdaSharpCoreLoggingStreamRole"
            }
          ]
        }
      }
    },
    "QueryFunctionSource1ScheduleEvent": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": {
          "Fn::Sub": "rate(${TwitterQueryInterval} minutes)"
        },
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "QueryFunction",
                "Arn"
              ]
            },
            "Id": "QueryFunction-1",
            "InputTransformer": {
              "InputPathsMap": {
                "id": "$.id",
                "time": "$.time"
              },
              "InputTemplate": "{\r\n    \"Id\": <id>,\r\n    \"Time\": <time>,\r\n    \"Name\": \"\"\r\n}"
            }
          }
        ]
      }
    },
    "QueryFunctionSource1Permission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "QueryFunction",
            "Arn"
          ]
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "QueryFunctionSource1ScheduleEvent",
            "Arn"
          ]
        }
      }
    }
  },
  "Outputs": {
    "Module": {
      "Value": "LambdaSharp.Twitter.Query:1.0-DEV"
    },
    "TweetTopic": {
      "Value": {
        "Ref": "TweetTopic"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}::TweetTopic"
        }
      },
      "Description": "This topic publishes tweets that match the query"
    }
  },
  "Conditions": {
    "SecretsIsEmpty": {
      "Fn::Equals": [
        {
          "Ref": "Secrets"
        },
        ""
      ]
    },
    "XRayIsEnabled": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "EnableXRayTracing"
            },
            "Disabled"
          ]
        }
      ]
    },
    "LambdaSharpCoreDeadLetterQueueIsImported": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "LambdaSharpCoreDeadLetterQueue"
                },
                ""
              ]
            }
          ]
        },
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                "0",
                {
                  "Fn::Split": [
                    "$",
                    {
                      "Ref": "LambdaSharpCoreDeadLetterQueue"
                    }
                  ]
                }
              ]
            },
            ""
          ]
        }
      ]
    },
    "LambdaSharpCoreLoggingStreamIsImported": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "LambdaSharpCoreLoggingStream"
                },
                ""
              ]
            }
          ]
        },
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                "0",
                {
                  "Fn::Split": [
                    "$",
                    {
                      "Ref": "LambdaSharpCoreLoggingStream"
                    }
                  ]
                }
              ]
            },
            ""
          ]
        }
      ]
    },
    "LambdaSharpCoreLoggingStreamRoleIsImported": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "LambdaSharpCoreLoggingStreamRole"
                },
                ""
              ]
            }
          ]
        },
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                "0",
                {
                  "Fn::Split": [
                    "$",
                    {
                      "Ref": "LambdaSharpCoreLoggingStreamRole"
                    }
                  ]
                }
              ]
            },
            ""
          ]
        }
      ]
    },
    "LambdaSharpCoreDefaultSecretKeyIsImported": {
      "Fn::And": [
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "LambdaSharpCoreDefaultSecretKey"
                },
                ""
              ]
            }
          ]
        },
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                "0",
                {
                  "Fn::Split": [
                    "$",
                    {
                      "Ref": "LambdaSharpCoreDefaultSecretKey"
                    }
                  ]
                }
              ]
            },
            ""
          ]
        }
      ]
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterLabels": {
        "TwitterApiKey": {
          "default": "API Key [Secret]"
        },
        "TwitterApiSecretKey": {
          "default": "API Secret Key [Secret]"
        },
        "TwitterQuery": {
          "default": "Search query [String]"
        },
        "TwitterQueryInterval": {
          "default": "Query internal in minutes (from 2 to 1440) [Number]"
        },
        "TwitterLanguageFilter": {
          "default": "ISO 639-1 Language filters [String]"
        },
        "TwitterSentimentFilter": {
          "default": "This parameter sets the sentiment filter (one of: SKIP, POSITIVE, NEUTRAL, NEGATIVE, MIXED, ALL) [String]"
        },
        "Secrets": {
          "default": "Comma-separated list of additional KMS secret keys [String]"
        },
        "EnableXRayTracing": {
          "default": "Enable AWS X-Ray tracing mode for module resources [String]"
        },
        "LambdaSharpCoreDeadLetterQueue": {
          "default": "DeadLetterQueue [String]"
        },
        "LambdaSharpCoreLoggingStream": {
          "default": "LoggingStream [String]"
        },
        "LambdaSharpCoreLoggingStreamRole": {
          "default": "LoggingStreamRole [String]"
        },
        "LambdaSharpCoreDefaultSecretKey": {
          "default": "DefaultSecretKey [String]"
        },
        "DeploymentBucketName": {
          "default": "Deployment S3 bucket name [String]"
        },
        "DeploymentPrefix": {
          "default": "Deployment tier prefix [String]"
        },
        "DeploymentPrefixLowercase": {
          "default": "Deployment tier prefix (lowercase) [String]"
        },
        "DeploymentRoot": {
          "default": "Root stack name for nested deployments, blank otherwise [String]"
        },
        "DeploymentChecksum": {
          "default": "CloudFormation template MD5 checksum [String]"
        }
      },
      "ParameterGroups": [
        {
          "Label": {
            "default": "Twitter Settings"
          },
          "Parameters": [
            "TwitterApiKey",
            "TwitterApiSecretKey",
            "TwitterQuery",
            "TwitterQueryInterval",
            "TwitterLanguageFilter"
          ]
        },
        {
          "Label": {
            "default": "Module Settings"
          },
          "Parameters": [
            "TwitterSentimentFilter"
          ]
        },
        {
          "Label": {
            "default": "LambdaSharp Module Options"
          },
          "Parameters": [
            "Secrets",
            "EnableXRayTracing"
          ]
        },
        {
          "Label": {
            "default": "LambdaSharp.Core Imports"
          },
          "Parameters": [
            "LambdaSharpCoreDeadLetterQueue",
            "LambdaSharpCoreLoggingStream",
            "LambdaSharpCoreLoggingStreamRole",
            "LambdaSharpCoreDefaultSecretKey"
          ]
        },
        {
          "Label": {
            "default": "LambdaSharp Deployment Settings (DO NOT MODIFY)"
          },
          "Parameters": [
            "DeploymentBucketName",
            "DeploymentPrefix",
            "DeploymentPrefixLowercase",
            "DeploymentRoot",
            "DeploymentChecksum"
          ]
        }
      ]
    },
    "LambdaSharp::Manifest": {
      "Version": "2018-12-31",
      "Module": "LambdaSharp.Twitter.Query:1.0-DEV",
      "ParameterSections": [
        {
          "Title": "Twitter Settings",
          "Parameters": [
            {
              "Name": "TwitterApiKey",
              "Type": "Secret",
              "Label": "API Key"
            },
            {
              "Name": "TwitterApiSecretKey",
              "Type": "Secret",
              "Label": "API Secret Key"
            },
            {
              "Name": "TwitterQuery",
              "Type": "String",
              "Label": "Search query"
            },
            {
              "Name": "TwitterQueryInterval",
              "Type": "Number",
              "Label": "Query internal in minutes (from 2 to 1440)",
              "Default": "60"
            },
            {
              "Name": "TwitterLanguageFilter",
              "Type": "String",
              "Label": "ISO 639-1 Language filters"
            }
          ]
        },
        {
          "Title": "Module Settings",
          "Parameters": [
            {
              "Name": "TwitterSentimentFilter",
              "Type": "String",
              "Default": "SKIP"
            }
          ]
        },
        {
          "Title": "LambdaSharp Module Options",
          "Parameters": [
            {
              "Name": "Secrets",
              "Type": "String",
              "Label": "Comma-separated list of additional KMS secret keys",
              "Default": ""
            },
            {
              "Name": "EnableXRayTracing",
              "Type": "String",
              "Label": "Enable AWS X-Ray tracing mode for module resources",
              "Default": "Disabled"
            }
          ]
        },
        {
          "Title": "LambdaSharp.Core Imports",
          "Parameters": [
            {
              "Name": "LambdaSharpCoreDeadLetterQueue",
              "Type": "String",
              "Label": "DeadLetterQueue",
              "Default": "$LambdaSharp-Core::DeadLetterQueue",
              "Import": "LambdaSharp.Core::DeadLetterQueue"
            },
            {
              "Name": "LambdaSharpCoreLoggingStream",
              "Type": "String",
              "Label": "LoggingStream",
              "Default": "$LambdaSharp-Core::LoggingStream",
              "Import": "LambdaSharp.Core::LoggingStream"
            },
            {
              "Name": "LambdaSharpCoreLoggingStreamRole",
              "Type": "String",
              "Label": "LoggingStreamRole",
              "Default": "$LambdaSharp-Core::LoggingStreamRole",
              "Import": "LambdaSharp.Core::LoggingStreamRole"
            },
            {
              "Name": "LambdaSharpCoreDefaultSecretKey",
              "Type": "String",
              "Label": "DefaultSecretKey",
              "Default": "$LambdaSharp-Core::DefaultSecretKey",
              "Import": "LambdaSharp.Core::DefaultSecretKey"
            }
          ]
        }
      ],
      "RuntimeCheck": true,
      "Hash": "AFE670647E06008F72CEFA6974CAFE7A",
      "Git": {
        "Branch": "test-branch",
        "SHA": "0123456789ABCDEF0123456789ABCDEF01234567"
      },
      "Dependencies": [
        {
          "ModuleFullName": "LambdaSharp.Core",
          "MinVersion": "0.6"
        }
      ],
      "Outputs": [
        {
          "Name": "TweetTopic",
          "Description": "This topic publishes tweets that match the query",
          "Type": "AWS::SNS::Topic"
        }
      ],
      "ResourceNameMappings": {
        "QueryFunctionLogGroup": "QueryFunction::LogGroup",
        "ModuleRole": "Module::Role",
        "ModuleRegistration": "Module::Registration",
        "QueryFunctionRegistration": "QueryFunction::Registration",
        "QueryFunctionLogGroupSubscription": "QueryFunction::LogGroupSubscription",
        "QueryFunctionSource1ScheduleEvent": "QueryFunction::Source1ScheduleEvent",
        "QueryFunctionSource1Permission": "QueryFunction::Source1Permission"
      },
      "TypeNameMappings": {
        "Custom::LambdaSharpRegistrationModule": "LambdaSharp::Registration::Module",
        "Custom::LambdaSharpRegistrationFunction": "LambdaSharp::Registration::Function"
      }
    }
  }
}