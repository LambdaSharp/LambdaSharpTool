{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "LambdaSharp CloudFormation Test (v1.0)",
  "Parameters": {
    "ModuleName": {
      "Type": "String",
      "Description": "LambdaSharp Module Name",
      "Default": "TestModule"
    },
    "Tier": {
      "Type": "String",
      "Description": "LambdaSharp Deployment Tier"
    },
    "TierLowercase": {
      "Type": "String",
      "Description": "LambdaSharp Deployment Tier (lowercase)"
    },
    "DeploymentBucketName": {
      "Type": "String",
      "Description": "LambdaSharp Deployment S3 Bucket Name"
    },
    "DeploymentKeyPrefix": {
      "Type": "String",
      "Description": "LambdaSharp Deployment S3 Bucket Key Prefix"
    }
  },
  "Resources": {
    "MyResource": {
      "Type": "Custom::Something",
      "Properties": {
        "ServiceToken": "arn:something",
        "UseBase64": {
          "Fn::Base64": "hello world"
        },
        "UseGetAtt": {
          "Fn::GetAtt": [
            "OtherResource",
            "Arn"
          ]
        },
        "UseGetAZz": {
          "Fn::GetAZs": "us-west-1"
        },
        "UseImportValue": {
          "Fn::ImportValue": "OtherStack-ExportedParameterName"
        },
        "UseRef": {
          "Ref": "OtherResource"
        },
        "UseJoin": {
          "Fn::Join": [
            ":",
            [
              {
                "Ref": "OtherResource"
              },
              {
                "Fn::GetAtt": [
                  "OtherResource",
                  "Arn"
                ]
              }
            ]
          ]
        },
        "UseCidr": {
          "Fn::Cidr": [
            "192.168.0.0/24",
            "6",
            "5"
          ]
        },
        "UseFindInMap": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "HVM64"
          ]
        },
        "UseSelect": {
          "Fn::Select": [
            "1",
            [
              "apples",
              "grapes",
              "oranges",
              "mangoes"
            ]
          ]
        },
        "UseSplit": {
          "Fn::Split": [
            "|",
            "a|b|c"
          ]
        },
        "UseSub1": {
          "Fn::Sub": [
            "www.${Domain}",
            {
              "Domain": {
                "Ref": "RootDomainName"
              }
            }
          ]
        },
        "UseSub2": {
          "Fn::Sub": "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}"
        },
        "UseTransform1": {
          "Fn::Transform": {
            "Name": "MacroName1",
            "Parameters": {
              "Param1": "Value1"
            }
          }
        },
        "UseTransform2": {
          "Fn::Transform": {
            "Name": "MacroName2",
            "Parameters": {
              "Param1": "Value2"
            }
          }
        }
      }
    },
    "OtherResource": {
      "Type": "AWS::SNS::Topic",
      "Properties": {}
    },
    "CloudWatchLogsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Sid": "CloudWatchLogsKinesisInvocation",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Sub": "logs.${AWS::Region}.amazonaws.com"
                }
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Sid": "CloudWatchLogsKinesisPermissions",
                  "Effect": "Allow",
                  "Action": "kinesis:PutRecord",
                  "Resource": {
                    "Fn::ImportValue": {
                      "Fn::Sub": "${Tier}-LambdaSharp-LoggingStreamArn"
                    }
                  }
                }
              ]
            },
            "PolicyName": {
              "Fn::Sub": "${Tier}-TestModule-Permissions-Policy-For-CWL"
            }
          }
        ]
      }
    },
    "ModuleRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Sid": "LambdaInvocation",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Sid": "LambdaLoggingWrite",
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Sid": "LambdaDeadLetterQueueLogging",
                  "Effect": "Allow",
                  "Action": [
                    "sqs:SendMessage"
                  ],
                  "Resource": {
                    "Fn::ImportValue": {
                      "Fn::Sub": "${Tier}-LambdaSharp-DeadLetterQueueArn"
                    }
                  }
                }
              ]
            },
            "PolicyName": {
              "Fn::Sub": "${Tier}-TestModule-policy"
            }
          }
        ]
      }
    },
    "Function": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "DeploymentBucketName"
          },
          "S3Key": {
            "Fn::Sub": "${DeploymentKeyPrefix}TestModule/TestModule.Function-NOCOMPILE.zip"
          }
        },
        "DeadLetterConfig": {
          "TargetArn": {
            "Fn::ImportValue": {
              "Fn::Sub": "${Tier}-LambdaSharp-DeadLetterQueueArn"
            }
          }
        },
        "Description": "My function (v1.0)",
        "Environment": {
          "Variables": {
            "TIER": {
              "Ref": "Tier"
            },
            "MODULE": "TestModule",
            "MODULEVERSION": "1.0",
            "DEADLETTERQUEUE": {
              "Fn::ImportValue": {
                "Fn::Sub": "${Tier}-LambdaSharp-DeadLetterQueueUrl"
              }
            },
            "LAMBDARUNTIME": "dotnetcore2.1",
            "STR_MYCUSTOMRESOURCEPROPERTY": {
              "Fn::GetAtt": [
                "MyResource",
                "Result"
              ]
            }
          }
        },
        "Handler": "TestModule.Function::MindTouch.LambdaSharpTestModule.Function.Function::FunctionHandlerAsync",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "ModuleRole",
            "Arn"
          ]
        },
        "Runtime": "dotnetcore2.1",
        "Tags": [
          {
            "Key": "lambdasharp:tier",
            "Value": {
              "Ref": "Tier"
            }
          },
          {
            "Key": "lambdasharp:module",
            "Value": "TestModule"
          }
        ],
        "Timeout": "30"
      }
    },
    "FunctionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": "/aws/lambda/${Function}"
        },
        "RetentionInDays": 7
      }
    },
    "FunctionLogGroupSubscription": {
      "Type": "AWS::Logs::SubscriptionFilter",
      "Properties": {
        "DestinationArn": {
          "Fn::ImportValue": {
            "Fn::Sub": "${Tier}-LambdaSharp-LoggingStreamArn"
          }
        },
        "FilterPattern": "-\"*** \"",
        "LogGroupName": {
          "Ref": "FunctionLogGroup"
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "CloudWatchLogsRole",
            "Arn"
          ]
        }
      }
    }
  }
}