{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "LambdaSharp CloudFormation Test (v1.0)",
  "Parameters": {
    "Version": {
      "Type": "String",
      "Description": "LambdaSharp module version",
      "Default": "1.0"
    }
  },
  "Resources": {
    "VersionSsmParameter": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Type": "String",
        "Description": "LambdaSharp module version",
        "Value": "1.0",
        "Name": "/Test/TestModule/Version"
      }
    },
    "RollbarToken": {
      "Type": "Custom::LambdaSharpRollbarProject",
      "Properties": {
        "ServiceToken": "arn:aws:sns:us-east-1:123456789012:LambdaSharpRollbar-RollbarCustomResourceTopic",
        "Tier": "Test",
        "Module": "TestModule",
        "Project": "TestModule",
        "Deployment": "Test"
      }
    },
    "ModuleRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Sid": "LambdaInvocation",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Sid": "LambdaLoggingWrite",
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Sid": "LambdaLoggingCreate",
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup"
                  ],
                  "Resource": "*"
                },
                {
                  "Sid": "LambdaDeadLetterQueueLogging",
                  "Effect": "Allow",
                  "Action": [
                    "sqs:SendMessage"
                  ],
                  "Resource": "arn:aws:sqs:us-east-1:123456789012:LambdaSharp-DeadLetterQueue"
                },
                {
                  "Sid": "LambdaSnsLogging",
                  "Effect": "Allow",
                  "Action": [
                    "sns:Publish"
                  ],
                  "Resource": "arn:aws:sns:us-east-1:123456789012:LambdaSharp-LoggingTopic"
                }
              ]
            },
            "PolicyName": "Test-TestModule-policy"
          }
        ]
      }
    },
    "Function": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "lambdsharp-bucket-name",
          "S3Key": "TestModule/TestModule.Function-NOCOMPILE.zip"
        },
        "DeadLetterConfig": {
          "TargetArn": "arn:aws:sqs:us-east-1:123456789012:LambdaSharp-DeadLetterQueue"
        },
        "Description": "My function (v1.0)",
        "Environment": {
          "Variables": {
            "TIER": "Test",
            "MODULE": "TestModule",
            "DEADLETTERQUEUE": "https://sqs.us-east-1.amazonaws.com/123456789012/LambdaSharp-DeadLetterQueue",
            "LOGGINGTOPIC": "arn:aws:sns:us-east-1:123456789012:LambdaSharp-LoggingTopic",
            "LAMBDARUNTIME": "dotnetcore2.1",
            "STR_VERSION": "1.0",
            "STR_ROLLBARTOKEN": {
              "Fn::GetAtt": [
                "RollbarToken",
                "Result"
              ]
            }
          }
        },
        "FunctionName": "Test-TestModule-Function",
        "Handler": "TestModule.Function::MindTouch.LambdaSharpTestModule.Function.Function::FunctionHandlerAsync",
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "ModuleRole",
            "Arn"
          ]
        },
        "Runtime": "dotnetcore2.1",
        "Tags": [
          {
            "Key": "lambdasharp:tier",
            "Value": "Test"
          },
          {
            "Key": "lambdasharp:module",
            "Value": "TestModule"
          }
        ],
        "Timeout": "30"
      }
    },
    "ModuleRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Description": "TestModule API (v1.0)",
        "FailOnWarnings": true,
        "Name": "TestModule API (Test)"
      }
    },
    "ModuleRestApiRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Sid": "LambdaRestApiInvocation",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Sid": "LambdaRestApiLogging",
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents",
                    "logs:GetLogEvents",
                    "logs:FilterLogEvents"
                  ],
                  "Resource": "*"
                }
              ]
            },
            "PolicyName": "TestModuleRestApiRolePolicy"
          }
        ]
      }
    },
    "ModuleRestApiAccount": {
      "Type": "AWS::ApiGateway::Account",
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ModuleRestApiRole",
            "Arn"
          ]
        }
      }
    },
    "ModuleRestApiSlackResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ModuleRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "slack",
        "RestApiId": {
          "Ref": "ModuleRestApi"
        }
      }
    },
    "ModuleRestApiSlackPOST": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": "{\r\n    \"response_type\": \"in_channel\",\r\n    \"text\": \"\"\r\n}"
              },
              "StatusCode": 200
            }
          ],
          "RequestParameters": {
            "integration.request.header.X-Amz-Invocation-Type": "'Event'"
          },
          "RequestTemplates": {
            "application/x-www-form-urlencoded": "{\r\n    #foreach($token in $input.path('$').split('&'))\r\n        #set($keyVal = $token.split('='))\r\n        #set($keyValSize = $keyVal.size())\r\n        #if($keyValSize == 2)\r\n            #set($key = $util.escapeJavaScript($util.urlDecode($keyVal[0])))\r\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])))\r\n            \"$key\": \"$val\"#if($foreach.hasNext),#end\r\n        #end\r\n    #end\r\n}"
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Sub": [
              "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Arn}/invocations",
              {
                "Arn": {
                  "Fn::GetAtt": [
                    "Function",
                    "Arn"
                  ]
                }
              }
            ]
          }
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "StatusCode": 200
          }
        ],
        "ResourceId": {
          "Ref": "ModuleRestApiSlackResource"
        },
        "RestApiId": {
          "Ref": "ModuleRestApi"
        }
      }
    },
    "FunctionModuleRestApiSlackPOSTPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "Function",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:us-east-1:123456789012:${RestApi}/LATEST/POST/slack",
            {
              "RestApi": {
                "Ref": "ModuleRestApi"
              }
            }
          ]
        }
      }
    },
    "ModuleRestApiDeployment1D8D386A4E80C757268C38F00177AA5A": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "Description": "TestModule API (Test) [1D8D386A4E80C757268C38F00177AA5A]",
        "RestApiId": {
          "Ref": "ModuleRestApi"
        }
      },
      "DependsOn": [
        "ModuleRestApiSlackPOST"
      ]
    },
    "ModuleRestApiStage": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {
          "Ref": "ModuleRestApiDeployment1D8D386A4E80C757268C38F00177AA5A"
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": true,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*"
          }
        ],
        "RestApiId": {
          "Ref": "ModuleRestApi"
        },
        "StageName": "LATEST"
      },
      "DependsOn": [
        "ModuleRestApiAccount"
      ]
    }
  },
  "Outputs": {
    "ModuleRestApi": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ModuleRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/LATEST/"
          ]
        ]
      },
      "Description": "TestModule API (v1.0)"
    }
  }
}