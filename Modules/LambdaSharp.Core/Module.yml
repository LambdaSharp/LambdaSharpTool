# LambdaSharp (Î»#)
# Copyright (C) 2018-2019
# lambdasharp.net
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

Module: LambdaSharp.Core
Description: LambdaSharp Core Resources and Services
Pragmas:
  - no-lambdasharp-dependencies
  - no-module-registration
  - Overrides:
      Module::DeadLetterQueue: !Ref DeadLetterQueue
      Module::LoggingStream: !Ref LoggingStream
      Module::LoggingStreamRole: !Ref LoggingStreamRole

Items:

  # Resource for LambdaSharp Deployment Tier
  - Parameter: DeadLetterQueue
    Scope: public
    Section: LambdaSharp Tier Settings
    Label: Dead letter queue for functions (leave blank to create a new queue)
    Description: Dead Letter Queue (ARN)
    Type: AWS::SQS::Queue
    Properties: { }

  - Parameter: LoggingStream
    Scope: public
    Section: LambdaSharp Tier Settings
    Label: Logging stream for functions (leave blank to create a new stream)
    Description: Logging Stream (ARN)
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        RoleARN: !GetAtt LoggingStreamDeliveryRole.Arn
        BucketARN: !Ref LoggingBucket
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 1

        # Storage format for processed records
        # TODO:
        CompressionFormat: GZIP

        # Store successfully transformed records here
        Prefix: !Ref LoggingRecordsSuccessPrefix

        # Store failed records here
        ErrorOutputPrefix: !Ref LoggingRecordsFailurePrefix

        # Register the Lambda function to process all records
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Type: Lambda
              Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt LoggingStreamAnalyzerFunction.Arn

  - Parameter: CoreSecretsKey
    Scope: all
    Section: LambdaSharp Tier Settings
    Label: KMS key used by LambdaSharp.Core to encrypt sensitive information (leave blank to create a new key)
    Description: Encryption Key (ARN)
    Type: AWS::KMS::Key
    AllowedPattern: '(arn:aws:kms:.*)?'
    ConstraintDescription: Must be a valid KMS Key ARN or left blank
    Allow:
      - kms:Decrypt
      - kms:Encrypt
    Properties:
      Description: !Sub "LambdaSharp.Core encryption key for ${AWS::StackName}"
      KeyPolicy:
        Version: 2012-10-17
        Id: !Sub "${AWS::StackName}CoreSecretsKeyPolicy"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"

  # Every CloudWatch log subscription needs a role that allows it to write to the Kinesis stream
  - Parameter: LoggingStreamRole
    Scope: public
    Section: LambdaSharp Tier Settings
    Label: IAM role used by CloudWatch Log to write records to logging stream (leave blank to create a new role)
    Description: CloudWatch Logs IAM Role (ARN)
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: CloudWatchLogsPrincipal
            Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}CloudWatchLogsFirehosePolicy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: CloudWatchLogsFirehosePermissions
                Effect: Allow
                Action:
                  - firehose:PutRecord
                  - firehose:PutRecordBatch
                Resource: !Ref LoggingStream

  # CloudWatch Logs Processing
  - Parameter: LoggingBucket
    Section: LambdaSharp Tier Settings
    Label: S3 bucket for storing ingested log records (leave blank to create a new S3 bucket)
    Description: Logging S3 Bucket (ARN)
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            ExpirationInDays: 90
            Transitions:
              - StorageClass: INTELLIGENT_TIERING
                TransitionInDays: 1

  - Parameter: LoggingRecordsSuccessPrefix
    Section: LambdaSharp Tier Settings
    Label: Destination S3 bucket prefix for records successfully processed by logging stream
    Description: S3 Object Prefix
    Type: String
    Default: "logging-success/"

  - Parameter: LoggingRecordsFailurePrefix
    Section: LambdaSharp Tier Settings
    Label: Destination S3 bucket prefix for records unsuccessfully processed processed by logging stream
    Description: S3 Object Prefix
    Type: String
    Default: "logging-failed/"

  - Resource: LoggingStreamDeliveryRole
    Description: IAM role for logging stream to interact with other resources in this module
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: FirehosePrincipal
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: sts:AssumeRole
      Policies:

        # Give Firehose access to S3 bucket
        - PolicyName: !Sub "${AWS::StackName}FirehoseS3Policy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:AbortMultipartUpload
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:PutObject
                Resource:
                  - !Ref LoggingBucket
                  - !Sub "${LoggingBucket}/*"

        # Give Firehose access to invoking the Lambda function
        - PolicyName: !Sub "${AWS::StackName}FirehoseLambdaPolicy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:GetFunctionConfiguration
                Resource: !GetAtt LoggingStreamAnalyzerFunction.Arn

  - Function: LoggingStreamAnalyzerFunction
    Memory: 256
    Timeout: 300

  # Rollbar Settings
  - Parameter: RollbarReadAccessToken
    Scope: RegistrationFunction
    Section: Rollbar Settings
    Label: Account-level token for read operations (leave blank to disable Rollbar integration)
    Description: Read Access Token
    Type: Secret
    Default: ""

  - Parameter: RollbarWriteAccessToken
    Scope: RegistrationFunction
    Section: Rollbar Settings
    Label: Account-level token for write operations (leave blank to disable Rollbar integration)
    Description: Write Access Token
    Type: Secret
    Default: ""

  - Parameter: RollbarProjectPattern
    Scope: RegistrationFunction
    Section: Rollbar Settings
    Label: 'Optional pattern for naming Rollbar projects (e.g. "Lambda-{ModuleFullName}")'
    Description: Project Pattern
    Default: ""

  - Parameter: RollbarProjectPrefix
    Scope: RegistrationFunction
    Section: Rollbar Settings
    Label: '(Obsolete: use "RollbarProjectPattern" instead) Optional prefix when creating Rollbar projects (e.g. "Lambda-")'
    Description: Project Prefix
    Default: ""

  # Module & Function Registrations
  - Resource: RegistrationTable
    Scope: all
    Description: DynamoDb table for storing function registrations
    Type: AWS::DynamoDB::Table
    Allow: ReadWrite
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH

  - Function: RegistrationFunction
    Description: Register LambdaSharp modules and functions
    Memory: 256
    Timeout: 30

  - ResourceType: LambdaSharp::Registration::Module
    Description: Custom resource type for module registrations
    Handler: RegistrationFunction
    Properties:

      - Name: ModuleId
        Description: Module CloudFormation stack name
        Type: String
        Required: true

      - Name: ModuleInfo
        Description: Module full name, version, and origin
        Type: String
        Required: true

      - Name: Module
        Description: "Module full name and version (OBSOLETE: use ModuleInfo instead)"
        Type: String
        Required: false

    Attributes:

      - Name: Registration
        Description: Registration ID
        Type: String

  - ResourceType: LambdaSharp::Registration::Function
    Description: Custom resource type for function registrations
    Handler: RegistrationFunction
    Properties:

      - Name: ModuleId
        Description: Module CloudFormation stack name
        Type: String
        Required: true

      - Name: FunctionId
        Description: Module function ARN
        Type: String
        Required: true

      - Name: FunctionName
        Description: Module function name
        Type: String
        Required: true

      - Name: FunctionLogGroupName
        Description: Module function CloudWatch log group name
        Type: String
        Required: true

      - Name: FunctionMaxMemory
        Description: Max memory for module function
        Type: Number
        Required: true

      - Name: FunctionMaxDuration
        Description: Max duration for module function
        Type: Number
        Required: true

      - Name: FunctionPlatform
        Description: Module function execution platform
        Type: String
        Required: true

      - Name: FunctionFramework
        Description: Module function execution framework
        Type: String
        Required: true

      - Name: FunctionLanguage
        Description: Module function programming language
        Type: String
        Required: true

    Attributes:

      - Name: Registration
        Description: Registration ID
        Type: String

  #######################
  # Bootstrap Resources #
  #######################

  # IMPORTANT: must EXACTLY match resources from 'LambdaSharpToolConfig.yml'

  - Variable: CoreServices
    Scope: public
    Description: Flag indicating if operating services are deployed (String)
    Value: Enabled

  # S3 Deployment Bucket
  - Parameter: ExistingDeploymentBucket
    Section: LambdaSharp Deployment Settings
    Label: ARN of an existing S3 bucket for LambdaSharp deployments (leave blank to create a new S3 bucket)
    Description: ARN of an existing S3 bucket for LambdaSharp deployments (leave blank to create a new S3 bucket)
    Type: String
    AllowedPattern: '(arn:aws:s3:.*)?'
    ConstraintDescription: Must be a valid S3 ARN (all lowercase) or left blank

  - Condition: CreateDeploymentBucket
    Value: !Equals [ !Ref ExistingDeploymentBucket, "" ]

  - Resource: DeploymentBucketResource
    Type: AWS::S3::Bucket
    If: CreateDeploymentBucket

  - Resource: DeploymentBucketPolicy
    Type: AWS::S3::BucketPolicy
    If: CreateDeploymentBucket
    Properties:
      Bucket: !Ref DeploymentBucketResource
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: serverlessrepo.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub "${DeploymentBucketResource.Arn}/*"

  - Resource: DeploymentBucket
    Scope: public
    Description: S3 bucket for published modules (ARN)
    Value: !If
      - CreateDeploymentBucket
      - !GetAtt DeploymentBucketResource.Arn
      - !Ref ExistingDeploymentBucket
    Type: AWS::S3::Bucket
    Allow: ReadWrite
